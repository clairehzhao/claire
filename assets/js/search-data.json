{
  
    
        "post0": {
            "title": "CPT Feature Outline",
            "content": "This outline is beneficial to helping with the backend when creating this feature for our project. Being able to have a clear outline with the college board requirements will allow for better planning and also ensure that I am meeting the requirements that are needed. . Feature Description . The feature I have for our project is the ovulation cycle tracker. . Purpose and Function . The purpose of this feature is to allow for women to see when they will be most ovulated. They are able to see how long they have been ovulated and how much longer they will be ovulated for. The feature is able to function by connecting with the period tracking page. It is able to use the data that is inputted from the user of their period (last period day, length, and typical menstrual cycle length) to output the days they user will be most ovulated. . Code Plan . Data Abstraction . This feature can use data abstraction by storing the values that the user inputs for their menstrual cycle. The feature will have to be able to store multiple different values and being able to store this will be easier to access them when finding the ovulation period. . Managing Complexity . To manage the complexity of this program I will use a list to help. This list will be used so that it can access and store the data from the user input. By having this stored then we can access them to output the future days of ovulation . Procedural Abstraction . This feature can take the data from the list and object that is made. This will then help to create and calculate the days of ovulation. The parameters that will be added is the days of starting and ending ovulation and how long they will be ovulated for. . Algorithm Implementation . Sequencing, selection, and iteration will all be used in this feature. Sequencing will be used by outputing the dates that they will be ovulated, the feature must carry out the steps to produce the dates. Then selection can be used because the user will be able to see the days that they are ovulated for multiple months and the feature will have to select that. Iteration will be used because the program will have to be repeated for each month with new data from the previous month. . Testing . The first call will be inputting the date of September 8th with a 30 day cycle and a 4 day period length. There will be a default output of the next month, which means that from September 24-29 will be highlighted in blue which shows the days that they will be ovulated. The second call will have the user inputting September 8th with a 30 day cycle and a 4 day period length again. This time they will choose how many months to be shown. The user can click 3 months and have September 24-29, November 1-6, and December 3-8th highlighted in blue. . Video Plan . For the video I will input the date (December 30th) for the date of the last period, 4 days for the length, and 30 days for the usual menstrual cycle length into the menstrual cycle page. Then clicking to the ovulation page, there will be the data that was inputted with the days of ovulation highlighted in blue. Then I will look at a couple future months to ensure that they are all working. This will help show how the frontend looks and show how the code that was written is functioning. .",
            "url": "https://clairehzhao.github.io/claire/week20/markdown/2023/01/29/cpt.html",
            "relUrl": "/week20/markdown/2023/01/29/cpt.html",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "College Board 5.1 and 5.2",
            "content": "College Board 5.1 . There are always going to be benefits and disadvantages to technology . ChatGPT . used to search up things or answer questions | there are some problems/risks of using ChatGPT: bias | not able to find sources | doesnt see multiple perspectives | . | . College Board 5.2 . Digital Divide is a difference between people in which they either have or don’t have something in relationship to technology, computers, or the internet . Other schools vs us vs. Google . there is a digital divide between us, other schools, and google some schools have worse technology than us, not being able to have computers | google has more advanced technology because they are able to have more access to them and they have more data that they can use | . | . Reflection . Think of three beneficial effects of your projects based on 5.1 Unit Helping everyone become more informed on menstrual cycles | Helping women track their cycle | Motivating people when they are having a hard time on their period | . | Think of a potential harmful effect of your project. It is not applicable to around half of the population | . | Answer with an opinion and learnings so far this year: What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? Having internet blockers at our school have their pros and cons. The school is able to ensure that the students are visiting appropriate and safe websites. A negative thing about this feature is that students sometimes need to use certain websites that are blocked and must use a VPN or hotspot. The benefits of students being able to use lab machines freely is that they have more access to the resources that they need, while also having more freedom. A disadvantage is that students could end up using the lab machines innappropriately. . | What concerns do you have personally about the digital divide? For yourself or for others. A concern that I have about the digital divide for others is that they could start to fall behind in technology and will not have as many resources as us. A concern that I have for myself when it comes to digital divide is that I could not have as much access to resources as others. |",
            "url": "https://clairehzhao.github.io/claire/week20/markdown/2023/01/24/cb5.1.html",
            "relUrl": "/week20/markdown/2023/01/24/cb5.1.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Trimester 2 College Board Quiz",
            "content": "Multiple Choice #2 Review . I got a 45/50, missing question 13, 15, 30, 33, and 47. . Question 13 . The correct answer was D, II and III only, because they have the NOT symbol in front. The person can not be both less than/greater than 18 and 16 so one of them must have the NOT symbol. . Question 15 . The correct answer was D. This is because on the last move at the top of the map it has to option to either go right or left. If it was accurately following the code then it would choose to rotate to the right before left. In D it chose to go left which is wrong. . Question 30 . The correct answer would be B and C. The drawCircle would be after assigning the new variables because they are needed to draw the circles correctly. Without these variables the circles can not be drawn. . Question 33 . The correct answer would be C because for algorithm II they are able to always ensure that the max is found. Algorithm I only works if it is greater than or equal to -1 because they set the current max as -1 so it needs to be greater than that to be the new max. . Question 47 . The correct answer would be C because this is a problem that needs a lot of time to solve so being able to use heurstics will be able to help. B does not need it because it is based off of math and that can be finished in a reasonable time. .",
            "url": "https://clairehzhao.github.io/claire/week20/markdown/2023/01/23/tri2cbquiz.html",
            "relUrl": "/week20/markdown/2023/01/23/tri2cbquiz.html",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; def __dir__(self): return [&quot;name&quot;, &quot;uid&quot;] # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$Znf...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$d2i...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$YVq...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$puN...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$5D4...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$Znf...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$d2i...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$f6J...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$puN...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$5D4...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$ZnfSBxKaURXIfJuI$4f7716b7188a8f53049a3f886ad624c5c69aea8ab9898ec393a164c98a02967a&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$d2i6PEETJV5FTFLd$8ce35b2decfed89171995601a8947473f5d8ccccef41a255d624c82f775311d3&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$f6J5jO3L9WobxPU2$d3c3522dbd4b5438a3d0506e323d9aecd4a5feabb6880683f07c8d0c78d8f4dc&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$puNPTCxIHfR0lvgG$d975e3a633c455bf4d6cc35251e121e67cebae9dbe7edd33b4d75c4e1706a9dd&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$5D4b3F6TbvZopEIA$a87eb3b7ed2758fe3fa729842f696a2b9f8130b72fb6377cd1b84c1d6cbbb13e&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$ZnfSBxKaURXIfJuI$4f7716b7188a8f53049a3f886ad624c5c69aea8ab9898ec393a164c98a02967a&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$d2i6PEETJV5FTFLd$8ce35b2decfed89171995601a8947473f5d8ccccef41a255d624c82f775311d3&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$f6J5jO3L9WobxPU2$d3c3522dbd4b5438a3d0506e323d9aecd4a5feabb6880683f07c8d0c78d8f4dc&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$puNPTCxIHfR0lvgG$d975e3a633c455bf4d6cc35251e121e67cebae9dbe7edd33b4d75c4e1706a9dd&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$5D4b3F6TbvZopEIA$a87eb3b7ed2758fe3fa729842f696a2b9f8130b72fb6377cd1b84c1d6cbbb13e&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(age) . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf #classof @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot; : self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password}, dob={self._dob}, classOf={self._classOf})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), classOf=&#39;1915&#39;) print(u1) u2 = User(name=&#39;Claire Zhao&#39;, uid=&#39;claire&#39;, password=&#39;12345&#39;, dob=date(2007, 2, 1), classOf=&#39;2025&#39;) print(u2) #print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) #print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) #print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) #print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: &#34;1915&#34;} {&#34;name&#34;: &#34;Claire Zhao&#34;, &#34;uid&#34;: &#34;claire&#34;, &#34;dob&#34;: &#34;02-01-2007&#34;, &#34;age&#34;: 15, &#34;classOf&#34;: &#34;2025&#34;} . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class Login: def __init__(self, name, uid, password, phone, email): self._name = name # variables with self prefix become part of the object, self._uid = uid self._phone = phone self.set_password(password) self._email = email #email @property def email(self): return self._email @email.setter def email(self, email): self._email = email @property def phone(self): return self._phone @phone.setter def phone(self, phone): self._phone = phone @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;phone&quot;: self.phone, &quot;email&quot;: self.email } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},phone={self._phone}, email={self._email})&#39; u1 = Login(name=&quot;Claire Zhao&quot;, uid=&quot;claire&quot;, password=&quot;1234&quot;, phone=&quot;858-111-1111&quot;, email=&quot;claire.zhao1234@gmail.com&quot;) print(u1) ###### For reference to see raw form ################ # print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) # print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) # print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . {&#34;name&#34;: &#34;Claire Zhao&#34;, &#34;uid&#34;: &#34;claire&#34;, &#34;phone&#34;: &#34;858-111-1111&#34;, &#34;email&#34;: &#34;claire.zhao1234@gmail.com&#34;} . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2007, 2, 1) age = calculate_age(dob) print(age) . 15 .",
            "url": "https://clairehzhao.github.io/claire/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Performance Task Scoring 1",
            "content": ". Notes: . make sure to know the difference between program and function | important reminder to make sure to listen and check critera carefully | must meet ALL criteria for the single point can&#39;t just have one or a couple of the requirements | . | .",
            "url": "https://clairehzhao.github.io/claire/week17/2023/01/05/performancereview1.html",
            "relUrl": "/week17/2023/01/05/performancereview1.html",
            "date": " • Jan 5, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 3 Lesson 17 - 18 Hacks and Notes",
            "content": "Notes: . Collatz: The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . | Hailstone numbers: The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . | Undecidable problems: An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . | Unsolvable problems: An unsolvable problem is one for which no algorithm can ever be written to find the solution. . | . Hack #1 . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(int(i)) else: i = (i / 2) list_.append(int(i)) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39; + &quot; n&quot;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;Sequence: &#39;) print(*l, sep=&quot; &quot;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Sequence: 12 6 3 10 5 16 8 4 2 1 Number of iterations: 9 . Hack #2 . Code 2 algorithms . Inefficient: . numbers = [100,99,98,97,96,95,94,93,92,91,90] diff = numbers[0] - numbers[1] - numbers[2] - numbers[3] - numbers[4]- numbers[5] - numbers[6] - numbers[7] - numbers[8] - numbers[9] - numbers[10] print(diff) . -845 . Efficient: . numbers = [99,98,97,96,95,94,93,92,91,90] diff = 100 for i in numbers: diff -= i print(diff) . -845 . The first one is less efficient than the second one because the inefficient one has to be done by individually typing each number. On the other hand the second algorithm uses a for loop to subtract which makes it easier for the person writing the code and it is less redundant. . Hack #3 . Explain algorithm efficiency in your own words . Alogrithm efficiency is code that is written in a manner that is not redundant and is not the same code over and over again. . Hack #4 . Code an efficient program that shows your daily tasks or schedule. . tasks = [&quot;shower&quot;, &quot;brush teeth&quot;, &quot;skincare&quot;, &quot;sleep&quot;] def complete_tasks(tasks): for task in tasks: if task == &quot;shower&quot;: print(&quot;Take a shower!&quot;) elif task == &quot;brush teeth&quot;: print(&quot;Go brush your teeth!&quot;) elif task == &quot;skincare&quot;: print(&quot;Do your skincare!&quot;) elif task == &quot;sleep&quot;: print(&quot;Go to bed!&quot;) complete_tasks(tasks) . Take a shower! Go brush your teeth! Do your skincare! Go to bed! .",
            "url": "https://clairehzhao.github.io/claire/student%20teaching/week16/jupyter/python/markdown/2022/12/14/unit3lesson17-18.html",
            "relUrl": "/student%20teaching/week16/jupyter/python/markdown/2022/12/14/unit3lesson17-18.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 3 Lesson 16 Hacks and Notes",
            "content": "Notes: . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | So, why use a simulation? Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | Outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? When a situation already has set results/data (won&#39;t change) | Examples: a score in a game, most purchased food, average yearly wage | . | . | . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . An example of a simulation could be simulating the emergency exit procedures in an airplane. This can be used to simulate the crash of the plane and then simulating what people would do for an emergency evacuation. They would not want to do this in real life because having people in a crashing plane is unsafe . Hack #2 . Simulation Quiz | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . Hack #3 . Describe the rolling dice simulation | . What makes it a simulation? . This is a simulation because the computer is rolling th dice for you instead of rolling dice by yourself. This code is producing the number from the dice roll with the random numbers. . What are its advantages and disadvantages? . Advantage: quicker, more efficient, don&#39;t have to buy dice . Disadvantage: not as hands on/different experience . In your opinion, would an experiment be better in this situation? . An experiment would not necessariily be better because in the simulation you are able to get numbers quickly and instantly . Hack #4 . Add a feature to the dice roll code: changed to a 10 sided dice | numbers sorted from least to greatest | . | . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 10) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) roll_results.sort() print(&quot;here are the numbers you rolled from least to greatest:&quot;, roll_results) . here are the numbers you rolled from least to greatest: [2, 4, 6, 7, 8, 8] .",
            "url": "https://clairehzhao.github.io/claire/student%20teaching/week16/jupyter/python/markdown/2022/12/13/unit3lesson16.html",
            "relUrl": "/student%20teaching/week16/jupyter/python/markdown/2022/12/13/unit3lesson16.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Girls in CS Panel",
            "content": "Kathyleen Beveridge . Qualcomm | Journey into hightech finance degree | waited quite a while before getting MBA | “My mission in life is not merely to survive, but to thrive; and to do so with some passion, some compassion, some humour and some style.” - Maya Angelou | started at HP very burnt out (took a break) | . | switched to Qualcomm after taking a 6 month break | then swithced the Thermo Fisher Scientific (Senior Director in marketing and economics) communicate with others | commercialize products | supervise marketing operators | 50 people globally reporting to her | . | . | HP: Create technology that makes life better for everyone, everywhere | Qualcomm: Inventing the tech the world loves | Thermo Fisher Scientific: To enable our customers to make the world healthier, cleaner and safer all three of them involve helping the world with tech | helping the consumers and benefiting these consumers | . | . Kris Porter . Titles Software Engineer - SRE | DevOps | Infrastructure | . | UCLA for electrical enginnering | first CS class second quarter at UCLA failed and retook (got a C in retake) | stopped programming for 8 years, then became a programmer | . | researched at the center for Embedded Networked Sensors | Jobs shops that fixed mac computers | Data centers that deal with routers | Job at startup 2010 email marketing automations | DevOps | . | NBC Universal streaming media infrastructure | . | Startup at carlsbad | Qualcomm Intro to DevOps | . | Twitter | . | Continuous learning in hightech constantly learning new things | not bored when working | learned: CCNA training | Python | Machine Learning and Deep Learning | . | . | . Q &amp; A: . Agile Methodology Experience different companies have different definitions of agile | Qualcomm focused on communication | short sprints | one month interavals | can get certification in agile methodolgy | . | Projects with Machine Learning learn how to use python libraries | Keras and TensorFlow | Data Science used for predicting coming events | . | Most important skill in a tech industry continuous learning | . learning how to learn | learning new things everywhere you go (regardless of stats of company) - don’t be concerned about things that you read on the news | stay resilient | working with computer systems is fullfilling | take risks | only risk is not learning - be adaptive | dont be afraid to change | changes in career paths - best technical people listen to requirements and translate it in terms of how the technology can meet the requirements | communicate | understand others | . | What is the biggest challenges in the tech industry and how to overcome them? changes that companies go through | . adapting with the company - interview | series of timed random tests solving problems | code has to work with these tests | . | . | How does coding help in the buisness industry helps with your way of thinking | looking at a problem, disecting it, and then solving it | critical thinking | problem solving | “walk me through the thinking that brought you to this conclusion” | helps you think methodically | . | Is there anything you are interested in learning or exploring right now? learning more about web3 | . | Key Takeaways: . be flexible and be willing to adapt | changes will happen and thats okay | coding isn’t just helpful with stem based jobs business and finance use it too | . | always continue to learn | take risks, the only bad risk is not learning | try new and hard things | . Reflection: . I am not personally interested in going into the computer science field but through this panel I was able to see and realize that learning computer science does not only help with high tech jobs. Computer science helps with the way that you think and how your brain analyzes problems. This can be helpful in any of the fields and in day to day life as well. .",
            "url": "https://clairehzhao.github.io/claire/week16/markdown/2022/12/13/cspannel.html",
            "relUrl": "/week16/markdown/2022/12/13/cspannel.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 3 Lesson 14 - 15 Hacks and Notes",
            "content": "Notes: . A library is a collection of code from an external source that can be used to add functionality to a program. | Randomization generates a value between two numbers. For example RANDOM(1,3) may result as 1 or 2 or 3, either one of those. | Method | Description . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . | . Hacks: . Lesson 3.14.1 . import math number = input(&quot;Insert the number that you want to find the greatest common divisor of&quot;) def gcdfunction(number): result = math.gcd(int(number)) return result print(&quot;The greatest common divisor is: &quot; + str(gcdfunction(number))) . The greatest common divisor is: 20 . First the library math is used and imported to ensure that the math functions are able to be used. Then the variable number is set where a person inputs the number that they wish to take the greatest common divisor of. A function is then defined with a result variable that is set equal to the greatest common divisor of the integer that the user input. The result is then returned and printed in the sentence stating what the greatest common divisor. . Lesson 3.15.1 . Define what an import random function does . An import random function generatees a random number that can be used in the function . | List a few other things that we can import other than random . math | flask | Numpy | TensorFlow | SciPy | own files | . | Lesson 3.15.2 . There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. | . import random spinner_lands = random.randint(1, 8) if spinner_lands &lt;= 3: color = &quot;green&quot; elif spinner_lands &lt;= 5: color = &quot;blue&quot; elif spinner_lands &lt;= 6: color = &quot;purple&quot; elif spinner_lands &lt;= 7: color = &quot;red&quot; elif spinner_lands &lt;= 8: color = &quot;orange&quot; print(&quot;The color you landed on is: &quot;, color) . The color you landed on is: green . What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? | . The numbers that can be outputted are any number from 12 to 20 including 12 and 20. .",
            "url": "https://clairehzhao.github.io/claire/student%20teaching/week16/jupyter/python/markdown/2022/12/12/unit3lesson14-15.html",
            "relUrl": "/student%20teaching/week16/jupyter/python/markdown/2022/12/12/unit3lesson14-15.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "Section 3.14.1 - Libraries (Ethan Tran) . Learning Objective . To be able to select appropriate libraries and/or existing code to use in the creation of new programs. . College Board Essential Knowledge . A software library contains procedures that can be used in the creation of new programs. | Existing segments of code can come from internal or external sources, ie. libraries or previously written code. | The use of libraries simplifies the task of creating complex programs. | Application program interfaces (APIs) are specifications for how the procedures in a library behave and can be used. | Documentation for a library or API is necessary in understanding the key behaviors provided by the API/library and how to utilize them in your work. | . Defining a Library . A library is a collection of code from an external source that can be used to add functionality to a program. | Libraries are very useful, as they can be used to save time and effort in the development process. | Libraries are usually included in a program using a special keyword called &quot; .&quot; This keyword tells the program to look for the library and use its code. | . Example . import math math.sqrt(64) . 8.0 . Review Questions (Answer for candy!) . . 1) In your own words, what is a library? . 2) Why are libraries useful when writing a program? . 3) What keyword is used to add a pre-made library? . Hacks . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . . . Lesson 3.15.1 . What is randomization? . 1) Randomization generates a value between two numbers. For example RANDOM(1,3) may result as 1 or 2 or 3, either one of those. . 2) Now if we look into our day to day life we can see that randomization is all around us. . Now for a piece of candy does anyone want to tell us an example of randomization during our day to day life. . 3) In order to use the random function we have to first import random at the very beggining. . Now lets look at the code below right here. . import random answer1 = random.randint(0,3) answer2 = random.randint(1,8) answer3 = answer1 + answer2 print(answer3) . 8 . 1) The lowest number that will be generated is 0 for answer 1 and for answer2, the lowest that will be generated is 1 so the lowest number that can be generated for answer 3 would be 1. . 2) The highest number that will be generated to answer1 is 3 and the highest number that will be generated for answer 2 is 8 so the highest number for answer 3 would be 11. . 3) The range of numbers that answer 3 could print out would be from 1 to 11. . So a normal dice contains six sides with 1-6 on the individual sides. Which of the following code would simulate the result of rolling the dice three times and adds together all the obtained values together? . A. . import random sum = random.randint(1,6) + random.randint(1,6) + random.randint(1,6) print(sum) . 12 . B. . import random sum = random.randint(1,18) print(sum) . 17 . C. . import random sum = 3*random.randint(1,6) print(sum) . 12 . 1) Its not B because B is saying that it is going to choose one number between the range of 1 and 18 and not the sum of 3 diff numbers. . 2) C is not correct also because C is saying that the computer is choosing one random between 1 and 6 and multiplying that 3 times but we want the sum of three different numbers between 1 and 6. . 3) So the answer is A. . . For the last example: . import random i = 1 while i &lt; 4: choose = random.randint(1,10) print(choose) i += 1 . 6 9 8 . Which answers could not be possible for the code above? . A. 4 7 6 . B. 9 1 8 . C. 2 11 5 . D. 5 10 2 . Random can also have different methods, in the above examples we only used one example, randint which returns a random number between the given range. Down below I have created a table of all the methods with the description of what it is used for with the random function. . Method | Description . seed() | Initialize the random number generator . getstate() | Returns the current internal state of the random number generator . setstate() | Restores the internal state of the random number generator . getrandbits() | Returns a number representing the random bits . randrange() | Returns a random number between the given range . randint() | Returns a random number between the given range . choice() | Returns a random element from the given sequence . choices() | Returns a list with a random selection from the given sequence . shuffle() | Takes a sequence and returns the sequence in a random order . sample() | Returns a given sample of a sequence . random() | Returns a random float number between 0 and 1 . uniform() | Returns a random float number between two given parameters . betavariate() | Returns a random float number between 0 and 1 based on the Beta distribution (used in statistics) . expovariate() | Returns a random float number based on the Exponential distribution (used in statistics) . gammavariate() | Returns a random float number based on the Gamma distribution (used in statistics) . gauss() | Returns a random float number based on the Gaussian distribution (used in probability theories) . lognormvariate() | Returns a random float number based on a log-normal distribution (used in probability theories) . normalvariate() | Returns a random float number based on the normal distribution (used in probability theories) . vonmisesvariate() | Returns a random float number based on the von Mises distribution (used in directional statistics) . paretovariate() | Returns a random float number based on the Pareto distribution (used in probability theories) . weibullvariate() | Returns a random float number based on the Weibull distribution (used in statistics) . Lesson Recap: 1) random function generates a random number from a to b (range of two numbers) . 2) You need to import random in order to use the random function . 3) Every result from an import function is equally likely to occur . Hacks for lesson 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . . . 3.15.2 Lesson . Some Essential Knowledge that you need to know | RANDOM (a,b) will provide you with a random integer between the numbers a-b | Ex. RANDOM (7,18) can provide you with the number 13. | Using a random generator means each result can come out as different. | . Lets Try an Example Scenario . Try and formulate a way to write a segment of code that can simulate the flipping of a coin. | You have to use a random generator and assign the output of &quot;Heads&quot; or &quot;Tails&quot; to a specified result. | . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) # Try this code for yourself! . This is a pretty simple code to understand. | First we use the randomization here between the 1 and 2 to determine which side of the coin we get. | If we get 1 then we get heads. If we get 2 or anything else than 2, then we get Tails. | . Now let&#39;s answer questions using your knowledge. . If you want yes to show up 50% of the time, which of the code segments can you use? | . random(1,100) &lt;= 50 random(1,100) == 50 random(1,10) &lt;= 5 random(1,10) &gt;= 5 . The answer is A,C, and D! | . Why isn&#39;t the answer B? . This because when you are saying equal to 50, you are saying only when this one number shows up the output will be yes. | You want it to come up 50 percent of the time not just when that one number shows up. | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | . Hacks Summary . Hacks 3.14.1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . Hacks 3.15.1 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . Hacks 3.15.2 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | .",
            "url": "https://clairehzhao.github.io/claire/2022/12/11/Lesson-Unit-3-Section-14-15.html",
            "relUrl": "/2022/12/11/Lesson-Unit-3-Section-14-15.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 3 Lesson 12 - 13 Hacks and Notes",
            "content": "Notes: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | To use return values, you have to write the syntax return followed by the expression you would like to return var | Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Hacks: . Lesson 3.12 . Define procedure and parameter in your own words | . procedure: code that is used as instructions that takes inputs and returns outputs . parameter: variable that allows for inputs to be put into the variables . Quiz: | . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: C Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: D Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: B Correct :) Score: 3 / 3 . Define return values and output parameters in your own words | . return values: the output of a function . parameter: input value to the function . Code a procedure that finds the square root of any given number. (make sure to call and return the function) | . import math number = input(&quot;Insert the number that you want to take the square root of&quot;) def sqrtfunction(number): result = math.sqrt(int(number)) return result print(&quot;The square root is: &quot; + str(sqrtfunction(number))) . The square root is: 4.0 . Lesson 3.13 (3.B) . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective . Abstracting away your program logic into separate, modular functions is effective because it makes it easier to manage code and shortens your code so that there are less duplicates in the code. . | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) . | . def binary_search(nums, target): def sort_list (input_list): input_list.sort() return input_list sort_nums = sort_list(nums) mid_val = len(sort_nums) // 2 print(&quot;===============================&quot;) print(&quot;mid_index is &quot;, mid_val) print(&quot;len of nums is &quot;, len(sort_nums)) print(sort_nums) print(target) if target == sort_nums[mid_val]: print(&quot;Found match value!&quot;) return sort_nums[mid_val] elif len(sort_nums) == 1: print(&quot;Found closest value!&quot;) return sort_nums elif target &lt; sort_nums[mid_val]: binary_search(sort_nums[:mid_val],target) else: binary_search(sort_nums[mid_val:],target) user_list = [3,5,98,34,56,23,11,24,12] result = binary_search(user_list, 12) print(result) # The abstraction was added with the parameters of nums and target number. # The two defined functions have different functions but both of them are able to be called # By having subprocedures the two functions sort the numbers in the given unsorted list and perform the binary search . =============================== mid_index is 4 len of nums is 9 [3, 5, 11, 12, 23, 24, 34, 56, 98] 12 =============================== mid_index is 2 len of nums is 4 [3, 5, 11, 12] 12 =============================== mid_index is 1 len of nums is 2 [11, 12] 12 Found match value! None . Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | . def split_string(s): words = s.split(&quot; &quot;) new_words = [] for word in words: if word != &quot;&quot;: new_words.append(word) return words def count_words_starting_with_letter(words, letter): count = 0 for word in words: if word.lower().startswith(letter): count += 1 return count def count_words_starting_with_a_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;a&quot;) return count def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # HACKS def count_words_starting_with_any_letter_in_string(s, z): words = split_string(s) count = count_words_starting_with_letter(words, z) return count # using hacks: string = &quot;hey yall this is a test string!&quot; y = &quot;y&quot; e = &quot;e&quot; s_count1 = count_words_starting_with_any_letter_in_string(string, y) s_count2 = count_words_starting_with_any_letter_in_string(string, e) print(&quot;Words that start with y:&quot;, s_count1) print(&quot;Words that start with e:&quot;, s_count2) . Words that start with y: 1 Words that start with e: 0 . Lesson 3.13 (3.C) . Define procedure names and arguments in your own words. . procedure names: names that are used to give a function a name . arguments: a value that is given to a function when it is called . | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) . Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | . var a = 7 . var b = 13 . add . subtract . multiply . divide . &lt;!-- function --&gt; &lt;p&gt;var a = 7&lt;/p&gt; &lt;p&gt;var b = 13&lt;/p&gt; &lt;button id=&quot;enter&quot; onclick=&quot;add(a,b)&quot;&gt;add&lt;/button&gt; &lt;p id=&quot;resultadd&quot;&gt;&lt;/p&gt; &lt;button id=&quot;enter&quot; onclick=&quot;subtract(a,b)&quot;&gt;subtract&lt;/button&gt; &lt;p id=&quot;resultsub&quot;&gt;&lt;/p&gt; &lt;button id=&quot;enter&quot; onclick=&quot;multiply(a,b)&quot;&gt;multiply&lt;/button&gt; &lt;p id=&quot;resultmult&quot;&gt;&lt;/p&gt; &lt;button id=&quot;enter&quot; onclick=&quot;divide(a,b)&quot;&gt;divide&lt;/button&gt; &lt;p id=&quot;resultdiv&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function add(a,b) { document.getElementById(&quot;resultadd&quot;).innerHTML = a + b // math } function subtract(a,b) { document.getElementById(&quot;resultsub&quot;).innerHTML = a - b } function multiply(a,b) { document.getElementById(&quot;resultmult&quot;).innerHTML = a * b // math } function divide(a,b) { document.getElementById(&quot;resultdiv&quot;).innerHTML = a / b // math } // variables are defined var a = 7 var b = 13 &lt;/script&gt; .",
            "url": "https://clairehzhao.github.io/claire/student%20teaching/week15/jupyter/python/markdown/2022/12/08/unit3lesson12-13.html",
            "relUrl": "/student%20teaching/week15/jupyter/python/markdown/2022/12/08/unit3lesson12-13.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 3 Lesson 8 & 10 Hacks and Notes",
            "content": "Notes: . Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met | Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met | Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop. | Traversing Lists: where all elements in the list are accessed, or a partial traversal, where only a portion of elements are accessed (can be a complete traversal) Complete Traversal: All elements in a list are assessed | Partial Traversal: Only a given portion of elements are assessed | Iterative Traversal: When loops are used to iterate through a list and to access each single element at a time. | . | insert( ) allows a value to be inserted into a list at index i | append( ) allows a value to be added at the end of a list | remove( ) allows an element at index i to be deleted from a list | length( ) returns the number of elements currently in a specific list | . Hacks 3.8.1 . Define an iteration | Part of an algorithm that repeats until a condition is met. . Make your own example of an iteration with at least 4 steps and a stopping condition (similar to mine that I did) | Wrapping Christmas Gifts: . i. there are n gifts that need to be wrapped . ii. grab gift to wrap . iii. grab wrapping paper . iv. wrap gift . v. repeat steps 2-4 until all gifts are wrapped . Program a simple iteration | schedule = [&quot;calc&quot;, &quot;bio&quot;, &quot;engineering&quot;, &quot;csp&quot;] i = 0 for x in schedule: print(schedule[i]) i+=1 . calc bio engineering csp . Hacks 3.8.2 . What is an iteration statement, in your own words? | . Changing the order that code is ran by repeatedly looping a section of code until the condition is met . Create a descending list of numbers using a for loop | . for x in range(10, 0, -1): print(x) . 10 9 8 7 6 5 4 3 2 1 . Using while loop, make a list of numbers which will form an output of 3,16,29,42,55,68,81 | . numbers = [3, 16, 29, 42, 55, 68, 81] x = 0 while x &lt; len(numbers): print(numbers[x]) x=x+1 . 3 16 29 42 55 68 81 . Hacks 3.10 . Find the lowest value in a list | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] potentialMin = nums[0] for item in nums: if item &lt; potentialMin: potentialMin = item print(&quot;The minimum number in the list is:&quot;, potentialMin) . The minimum number in the list is: 10 . Look at the APCSP Reference Sheet and take notes about ones you don&#39;t understand (at least 4) . Assign the value of x to aList[i] . aList[i] &lt;- x . | Any values in aList at indecies &gt;= i are shifted one position to the right. Length of list is increased by 1, value is plaed at index i in aList . insert(aList, i, value) . | Appends aList in increased by 1, and value placed at end of aList . append(aList, value) . | Remove the item at index i in aList and shifts to the left any values at indices greater that i. The length of aList is decreasing by 1 . remove(aList, i) . | . | . List&#39;s Quiz | . import getpass, sys import random def ask_question (question, answer): print(question) ans = input(question) print(ans) if ans == answer: print(&quot;Correct!&quot;) return 1 else: print(&quot;Wrong&quot;) return 0 question_list = [&quot;What allows a value to be inserted into a list at index i?&quot; , &quot;What allows an element at index i to be deleted from a list?&quot; , &quot;What returns the number of elements currently in a specific list?&quot; , &quot;What allows a value to be added at the end of a list?&quot;] answer_list = [&quot;index()&quot;, &quot;remove()&quot;, &quot;length()&quot; , &quot;append()&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 4) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Amazing job!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Not too bad, keep on studying! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 4. Its alright, better luck next time!&quot;) . What allows a value to be added at the end of a list? append() Correct! What allows an element at index i to be deleted from a list? remove() Correct! What returns the number of elements currently in a specific list? length() Correct! What allows a value to be inserted into a list at index i? index() Correct! 100.00% Your total score is: 4 out of 4. Not too bad, keep on studying! .",
            "url": "https://clairehzhao.github.io/claire/student%20teaching/week15/jupyter/python/markdown/2022/12/05/unit3lesson8&10.html",
            "relUrl": "/student%20teaching/week15/jupyter/python/markdown/2022/12/05/unit3lesson8&10.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Lesson 3.12 & 3.13",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Question: What is are correct names for a procedure? A) Method B) Function C) Both Answer: C Correct :) Question: What is a procedure? A) Sequencing B) Selection C) Iteration D) All Answer: D Correct :) Question: Use this for following question: def inchesToFeet(lengthInches): lengthFeet = lengthInches / 12 return lengthFeet What is the procedure name, the parameter, and what the procedure returns? A) feetToInches, lengthInches, lengthMeters B) inchesToFeet, lengthInches, lengthFeet C) inchesToFeet, lengthFeet, lengthInches D) lengthInches, inchesToFeet, lengthFeet Answer: B Correct :) Score: 3 / 3 . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) return result cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: 0b11011 Cube: 0b1000000 . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Friday, December 9 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://clairehzhao.github.io/claire/2022/12/04/lesson3.12_3.13.html",
            "relUrl": "/2022/12/04/lesson3.12_3.13.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 3 Lesson 11 Lesson Plan",
            "content": "Lesson 3.11 Binary Search . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first this is found by taking the highest index number plus the lowest index number and divide by 2 | the numbers on the right will be greater and the numbers on the left will be smaller | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . 0.25/0.25 - shows full understanding of binary search, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of binary search and completes all hacks . 0.20/0.25 - does not understand binary search and has not completed hacks .",
            "url": "https://clairehzhao.github.io/claire/student%20teaching/week15/jupyter/python/markdown/2022/12/03/lessonplan.html",
            "relUrl": "/student%20teaching/week15/jupyter/python/markdown/2022/12/03/lessonplan.html",
            "date": " • Dec 3, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 3 Lesson 5-7 Hacks and Notes",
            "content": "Notes: . boolean true or false | . | relational operators mathematical relationship between two variables | a = b | a &gt; b | . | logical operators not (opposite of whatever the data is) | and (evaluate two conditions together and determine if both conditions are met) | or (function only looks to see if one of the conditions is met wthen will) | . | conditionals selection: specific block of coce that will execute depending on the algorithm condition returning true or false | algorithm: finite set of instructions that accomplish a specific task | conditional statement/if-statement: statement that affects the sequence of control by executing certain statments depending on the value of a boolean | . | nested conditionals consists of conditional statements within conditional statements | one inside the other | can have three different conditions | . | . Hacks: . Lesson 3.5 . Explain in your own words what each logical operator does: not: output is the opposite of the input given (ex. given true then NOT would display false) | and: putting two conditions together and seeing if the input meets both conditions (ex. the number 24 must be less than 70 but greater than 20, this would be true) | or: only checks to see if one of the given conditions are met for the input (ex. if money is less than 0 or age is greater than 25 then -1 would end game) | . | Code your own scenario that makes sense for each logical operator | . print(&quot;NOT:&quot;) isSunny = False result = not(isSunny) print(result) # will print true bc opposite of false with not in result print(&quot;&quot;) print(&quot;AND:&quot;) age = 25 height = 5 if age &lt;= 30 and height &gt;= 4: print(&quot;You may proceed.&quot;) # needs to meet both requirements of age and height print(&quot;&quot;) print(&quot;OR:&quot;) age = 20 money = 100 if age &gt;= 18 or money &lt;= 500: print(&quot;You are eligable.&quot;) . NOT: True AND: You may proceed. OR: You are eligable. . Lesson 3.6 . 1 point for defining all key terms in your own words selection: depending on the conditiion using true or false, select a block of code to execute | algorithm: a block of code that is like instrucutions to complete a task | conditional statment/if-statment: code that makes decisions of how code is executed based on the if the condition given is true or false | . | 1 point for each challenge that your program or pair program challenge 1: | . | . inputstring = input(&quot;Type any sentence.&quot;) def vowel(inputstring): # define function count = 0 for char in inputstring: if char == &quot;a&quot; or char == &quot;e&quot; or char == &quot;i&quot; or char == &quot;o&quot; or char == &quot;u&quot;: count = count + 1 print(count) vowel(inputstring) # call function . 7 . input &quot;hey my name is claire&quot;, output showing the number of vowels in the sentence. . Lesson 3.7 . create 3 different flow charts representing nested statements and transfer them into code | . | age1 = input(&quot;Enter an age.&quot;) age2 = input(&quot;Enter an age.&quot;) if age1 == age2: print(&quot;Match!&quot;) else: if age1 &lt; age2: print(age1 + &quot; is less than &quot; + age2) elif age1 &gt; age2: print(age1 + &quot; is greater than &quot; + age2) print(&quot;Success&quot;) . 34 is greater than 12 Success . | houseLocation = &quot;san diego&quot; housePrice = 1000000 location = input(&quot;Where is the house you are looking at located?&quot;) price = input(&quot;How much is the house?&quot;) if houseLocation == location: if housePrice &gt; int(price): print(&quot;Purchase House&quot;) else: print(&quot;Not within budget&quot;) else: if housePrice &gt; int(price)/3: print(&quot;Purchase House&quot;) else: print(&quot;Not within budget or in right location&quot;) print(&quot;Success&quot;) . Not within budget Success . | testScore = input(&quot;What did you score on this test?&quot;) if int(testScore) &gt;= 70: if int(testScore) &gt;= 85: print(&quot;Great Job! You passed with an amazing score.&quot;) else: print(&quot;Good Job! You passed.&quot;) else: print(&quot;You did not pass.&quot;) print(&quot;Success&quot;) . Great Job! You passed with an amazing score. Success . create a piece of code that displays four statements instead of three | . sleep = input(&quot;How many hours of sleep did you get last night?&quot;) if int(sleep) &gt;= 7: if int(sleep) &gt;= 9: print(&quot;Wow! That is an amazing amount of sleep.&quot;) else: print(&quot;Nice! That is a good amount of sleep.&quot;) else: if int(sleep) &lt;= 4: print(&quot;Oh no, that is not enough sleep.&quot;) else: print(&quot;Okay, that is an average amount of sleep.&quot;) . Oh no, that is not enough sleep. . make piece of code that gives three different recommandations for possible classes to take at a school based on two different condtions. these conditions could be if the student likes STEM or not. | . stem = input(&quot;Do you enjoy taking STEM classes?&quot;) if stem == &quot;yes&quot;: listYes = [&quot;AP Calc AB&quot;, &quot;APCSP&quot;, &quot;AP Biology&quot;, &quot;Engineering&quot;] print(&quot;Great! You should take:&quot;, listYes) else: listNo = [&quot;APEL&quot;, &quot;APUSH&quot;, &quot;AP Lit&quot;, &quot;AP Art&quot;] print(&quot;Okay! You should take:&quot;, listNo) . Okay! You should take: [&#39;APEL&#39;, &#39;APUSH&#39;, &#39;AP Lit&#39;, &#39;AP Art&#39;] .",
            "url": "https://clairehzhao.github.io/claire/student%20teaching/week14/jupyter/python/markdown/2022/12/01/unit3lesson5-7.html",
            "relUrl": "/student%20teaching/week14/jupyter/python/markdown/2022/12/01/unit3lesson5-7.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Simulations- Unit 3 Section 16 Lesson",
            "content": "3.16 Intro to Simulations - Alexa . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | . Guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Examples of Simulations: . Simulations are used all the time over many different industries . testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . Simulation vs. Experiment . Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . leads into real life game example: . . . A Real Life Example: Four Corners - Lydia &amp; Ava . an example of a simulation and experiment = the game of 4 corners | games are simulations! | We are going to play a round of 4 corners here in class. This game is a real life version of our simulation. | Mr. Mortensen will be the person in the middle choosing corners. | Everyone will choose a corner, and if your corner is chosen, you are out! | . | . The rules of the game: . a person stands in the center of a room and the 4 coners are labeled 1-4 | Every player chooses a corner while the person in the middle closes their eyes | person in the middle chooses/calls out a number when instructed | every player in the chosen corner is now out | contine until there is a winner! | Let&#39;s play! . Below is the simulation of the four corners game! . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . You chose corner number 2 and are still in! You chose corner number 3 and are still in! You chose corner number 4 and you&#39;re OUT . Comparing Experiment to Simulation Code: . Mr. Mortensen (person in the middle) = random.randint | if statement = if player is out | else = safe/continue | while loop = repeats process until there is a winner of the game | . DEBRIEF QUESTIONS: . Why is it better to code simulations than experiement in real life? | What makes this game a simulation? | What are its advantages and disadvantages? | Would an experiment be better in this situation? (raise hands for each team) | . . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (collegeboard based questions) . Simulations Quiz (either screenshot or paste quiz in your notebook): | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . . . Rolling a Dice Example - Sri . Below is a simulation of rolling dice! Examine the code and think about how this simulation works and its purpose! . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [5, 1, 2] . . . Game of Life - Lydia &amp; Ava . Below is a simulation of the Game of Life, originally written by John Horton Conway. Mr. Mortensen has this game on the APCSP site and we think that it is a great example of an interactive simulation. . What it is . This game is an unpredictable cellular automaton | automaton = simulates and imitates human life, hence why this is called the game of life | After creating the initial configuration, the game evolves without pattern | . How it works . Cells in this game are alive or dead, similar to binary where they are on or off | The user created an initial configuration of cells on the grid, and presses play (tap the squares on the grid) | a cells&#39;s status (alive or dead, on or off) depends on the surrounding 8 cells status (surrounding 8 boxes). Here are the rules: The birth rule= a dead cell (blue box) that is surrounded by at least 3 alive cells (yellow boxes), will become alive | The death rule= an alive cell (yellow) with no or only one surviving cell around it dies (becomes blue) | Cell survival= an alive cell (yellow) with 2 or 3 alive neighboring cells will stay alive | . | . Try it Out! . Use the grid below to create cell figurations, press play, and watch your cells die, live, and move around! . . Remix of Game of Life . start step . . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . . . Hacks Overview . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | .",
            "url": "https://clairehzhao.github.io/claire/studentlesson/simulations",
            "relUrl": "/studentlesson/simulations",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 3 Lesson 3-4 Hacks and Notes",
            "content": "Notes: . three parts of algorithm sequencing | selection | iteration | . | arithmetic operations addition | sbtraction | multiplication | division | modulus | . | strings ordered sequences of characters | some procedures may exist that can be used with strings | each language has its own procedures, methods, and functions | . | . Hacks: . 3.3 . sequencing: | . Set item to number to search for. | Get next number in the list. | If number = item, display &quot;item found&quot; | If there are more numbers in the list, go back to Step 2. | Display &quot;item not found&quot;. | selection: | . If number = item, display &quot;item found&quot; | iteration: | . If there are more numbers in the list, go back to Step 2. | Aritmetic Expression: . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 . answer is 3 . Crossword Puzzle: 3 across: sequence 1 down: iteration 2 down: selection . 3.4 . Challenge Problem: . string1 = &quot;degree&quot; string2 = &quot; passenger&quot; FinalString = string1 + string2 print(FinalString[2:9]) print(len(FinalString)) print(len(FinalString[2:9])) . gree pa 16 7 . Quiz: .",
            "url": "https://clairehzhao.github.io/claire/student%20teaching/week14/jupyter/python/markdown/2022/11/29/unit3lesson3-4.html",
            "relUrl": "/student%20teaching/week14/jupyter/python/markdown/2022/11/29/unit3lesson3-4.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 3 Lesson 1-2 Hacks and Notes",
            "content": "Notes: . variable holds a value | . | data types integer | string | boolean | . | assignment operator college board uses: &lt;- | . | list index python lets u index from front of list and back of list | . | long and short way to print lists short way better | able to write code in shorter length and with less clutter | . | assignming values to one variable uses [] | . | . Hacks: . What is a variable? (3.1.1) . Code with variables: . name = input(&quot;What is your name?&quot;) # use of integers age = 15 print(f&quot;Hey my name is {name} and I am {age} years old.&quot;) . Hey my name is claire and I am 15 years old. . Variables (3.1.2) . Questions: . An assignment operator assigns a new value to a variable. | &lt;- is the symbol collegeboard psuedocode uses | 22 | Lists (3.2.1) . Questions: . A list is something that is used to store multiple variables in one variable. It is in brackets and separated with commas. | Individual strings that are inside of the list. | index the list or string (ex. list[1]) | an example of a string is &quot;hey guys&quot; | favfoods = [&quot;acai&quot;, &quot;pasta&quot;, &quot;thin mints&quot;, &quot;coffee&quot;] print(favfoods[0]) print(favfoods[-2]) . acai thin mints . Data Abstraction with Lists (3.2.2) . num1 = input(&quot;Input a number. &quot;) num2 = input(&quot;Input a number. &quot;) num3 = input(&quot;Input a number. &quot;) add = input(&quot;How much would you like to add? &quot;) # Add code in the space below num1 = int(num1) num2 = int(num2) num3 = int(num3) numlist = [num1, num2, num3] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i-1] += int(add) print(numlist) . [5, 6, 7] . Managing Complexity with lists (3.2.3) . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;The purpose of lists and dictionaries are to manage the ____ of a program&quot;) if rsp == &quot;complexity&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Lists are a form of data ______&quot;) if rsp == &quot;abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which brackets are used to assign values to a variable to make a list?&quot;) if rsp == &quot;[]&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, clairezhao running /opt/homebrew/opt/python@3.10/bin/python3.10 You will be asked 4 questions. Question: Are you ready to take a test? Question: The purpose of lists and dictionaries are to manage the ____ of a program complexity is correct! Question: Lists are a form of data ______ abstraction is correct! Question: Which brackets are used to assign values to a variable to make a list? [] is correct! clairezhao you scored 3/4 . food1 = &quot;pizza&quot; food2 = &quot;hot dog&quot; food3 = &quot;sushi&quot; food4 = &quot;strawberry&quot; food5 = &quot;sandwich&quot; print(food1, food2, food3, food4, food5) foods = [&quot;pizza&quot;, &quot;hot dog&quot;, &quot;sushi&quot;, &quot;strawberry&quot;, &quot;sandwich&quot;) print(foods] . pizza hot dog sushi strawberry sandwich (&#39;pizza&#39;, &#39;hot dog&#39;, &#39;sushi&#39;, &#39;strawberry&#39;, &#39;sandwich&#39;) . Lists are better for a program rather than writing lines of codes because it makes things written in less lines of code so that it is easier to read and less of a mess when looking at the code. Code that some would write in 10 lines can be written in 10 | . temp1 = 66 temp2 = 72 temp3 = 63 temp4 = 79 temp5 = 60 temp6 = 82 print(temp1, temp2, temp3, temp4, temp5, temp6) # short way temperature = [66, 72, 63, 79, 60, 82] print(temperature) . 66 72 63 79 60 82 [66, 72, 63, 79, 60, 82] .",
            "url": "https://clairehzhao.github.io/claire/student%20teaching/week14/jupyter/python/markdown/2022/11/28/unit3lesson1-2.html",
            "relUrl": "/student%20teaching/week14/jupyter/python/markdown/2022/11/28/unit3lesson1-2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 3.17-3.18 Group Lesson Period 4",
            "content": "Hailstone numbers . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 4 2 1 . Number of iterations . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Number of iterations: 8 . Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . More information . Hacks/Assignment . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . Unit 3, Section 17: Algorithm Efficiency - Kush &amp; Yasha . What is Algorithm Efficiency? . Yasha - Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . Here is an example of an inefficient algorithm: . def inefficientWay(numbers): # Then it loops over the numbers for i in range(len(numbers)): # Now it finds the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # Then it swaps the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(inefficientWay([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - This algorithm is inefficent because it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. This is an inefficient way to sort a list. . Kush - Here is an efficent way to sort a list: . def efficient_sort(numbers): # loop over the numbers for i in range(len(numbers)): # find the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # swap the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(efficient_sort([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - The difference in this algorithm is that it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. . How can you use algorithms to better your life: Mini activity . Yasha - Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my morning routine. . tasks = [&quot;wake up&quot;, &quot;eat breakfast&quot;, &quot;brush teeth&quot;, &quot;go to school&quot;] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;eat breakfast&quot;: print(&quot;Eating breakfast now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) . Waking up now! Eating breakfast now! Going to school now! . Taking a heuristic approach to problems P1 . Kush - Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Kush - Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Visual Representation . Hacks/assignment . Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) | Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) | use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) | .",
            "url": "https://clairehzhao.github.io/claire/2022/11/28/Quinn&Group.html",
            "relUrl": "/2022/11/28/Quinn&Group.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Trimester 2 Tools Check",
            "content": "Python Code in Jupyter Notebooks . Python written in python cell incorporated into Jupyter Notebook. . Python code printed out into fastpages blog site. Output of code running in cell underneath. . Python API in Jupyter Notebook . API from RapidAPI written in python, output of all the languages provided in the API. . API code succesfully printed into fastpages blog with output cell underneath code cell. . Python Installation . Python installed and Anaconda installed. . Javascript Code . Javascript written in notebook with code running. . Javascript code printed into fastpages blog site. Output of code running in a cell under the cell of code. . Make Server . Running make server command in terminal. . Server is created and ready to be used. . Using server to see changes without making commits. An easier and faster way when testing code. .",
            "url": "https://clairehzhao.github.io/claire/week13/markdown/2022/11/16/tri2toolcheck.html",
            "relUrl": "/week13/markdown/2022/11/16/tri2toolcheck.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Binary Conversions Hacks",
            "content": "Binary Math with Conversions . Shift Left Plus Binary Octal Hexadecimal Decimal ASCII Minus Shift Right . &lt;&lt; | +1 | 00000000 | 0 | 0 | 0 | 0 | -1 | &gt;&gt; | . Color | | | | | | | | | | | | | | | | | | | | | | | | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://clairehzhao.github.io/claire/2022/11/16/binaryconversionhacks.html",
            "relUrl": "/2022/11/16/binaryconversionhacks.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Binary Conversion Color Code",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . color Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | .",
            "url": "https://clairehzhao.github.io/claire/frontend/binary-color",
            "relUrl": "/frontend/binary-color",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Binary Search",
            "content": "def binary_search(nums, target): mid_val = len(nums)//2 print(&quot;===============================&quot;) print(&quot;mid_index is &quot;, mid_val) print(&quot;len of nums is &quot;, len(nums)) print(nums) print(target) if target == nums[mid_val]: print(&quot;Found match value!&quot;) return nums[mid_val] elif len(nums) == 1: print(&quot;Found closest value!&quot;) return nums elif target &lt; nums[mid_val]: binary_search(nums[:mid_val],target) else: binary_search(nums[mid_val:],target) num_list = [1,4,6,7,9,10,11,12,15,20,24,59,73,88] result = binary_search(num_list,12) print(result) result = binary_search(num_list,5) print(result) . =============================== mid_index is 7 len of nums is 14 [1, 4, 6, 7, 9, 10, 11, 12, 15, 20, 24, 59, 73, 88] 12 Found match value! 12 =============================== mid_index is 7 len of nums is 14 [1, 4, 6, 7, 9, 10, 11, 12, 15, 20, 24, 59, 73, 88] 5 =============================== mid_index is 3 len of nums is 7 [1, 4, 6, 7, 9, 10, 11] 5 =============================== mid_index is 1 len of nums is 3 [1, 4, 6] 5 =============================== mid_index is 1 len of nums is 2 [4, 6] 5 =============================== mid_index is 0 len of nums is 1 [4] 5 Result not found. None .",
            "url": "https://clairehzhao.github.io/claire/python/markdown/week12/jupyter/2022/11/09/pythonbinarysearch.html",
            "relUrl": "/python/markdown/week12/jupyter/2022/11/09/pythonbinarysearch.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Trimester 1 Final Reflection",
            "content": "Results: . . Corrections: . Question 43 (4.B): . Value of x after REPEAT UNTIL block . answer A is incorrect because this was only the result of x after the code is executed, but its not the actual result’s value | answer C is the correct answer. The result of this function is the sum of the integers from 0 to 5, which is 15 | . Question 48 (4.B) . Which variables are equal to 50 after assignments . answer D is incorrect because the value of y changes from being 50 to 75 | answer C is correct because x gets assigned to 50 in the 4th line and z get assigned 50 in the last line | . Overall Reflection . I scored pretty well on this quiz and only missed two questions. Both of these questions are in section 4.B which means that this section is what I have the least knowledge in. To improve on this, this weekend I plan on watching daily video 1 and 2, for section 3.1. This will help me improve on this portion of the quiz. .",
            "url": "https://clairehzhao.github.io/claire/week12/markdown/2022/11/06/finalreflection.html",
            "relUrl": "/week12/markdown/2022/11/06/finalreflection.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Night at the Museum",
            "content": "Night at the Museum . . Getting locked into the sound booth . . I started off the night getting locked into the sound booth… BUT a teacher was able to get me out right in time to present my project . Presenting . presented to multiple groups Mr. Mortenson | parents | kids | . | . Other Groups . I tried to walk around in the APCSA room to learn from them Here are some of the things that I observed: . all of the projects were very personal and usable | projects had functions that were good for day-to-day use | they implemented other subjects like math and science into their project | . Project that implemented math tools for calculus! . 2048 game that they coded with different colors! This game was not only interactive, but it was also a game that many people recognize. We were able to use the website on our own and we didn’t need explanation to use the website which is cool. . Improvement and Overall Experience . It was really cool and nice to present the project that I have been working on for weeks | We could have implemented a way for the user to search up songs | We were not able to connect the backend and the frontend, so being able to get that connected | I am excited to see how next trimester project will improve | .",
            "url": "https://clairehzhao.github.io/claire/week12/markdown/2022/11/03/night@museum.html",
            "relUrl": "/week12/markdown/2022/11/03/night@museum.html",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Intersection to Business and STEM at Qualcomm",
            "content": "Notes on Interesection to Business and STEM at Qualcomm . Director of Project Manager roles router | qualcomm chip | define features for wifi products | connects dots between innovation and invention | coordinate different teams that hold the pieces | . | The four pillars needed to build wifi networks: connectivity | intelligence | interaction | security | . | Remember: lead from any chair | stay curious | begin with the end result in mind | . | Take all opportunities that are given even if you feel that you are not as good as others, they willl help you learn and grow | Go to office hours and tutorials to learn more and get help | Working with new and random people are beneficial to everyone learn from a new person | pick up the skills that they have | perform better with a team | learn to work with different personalities | meet new people | important to make friends and not enemies | . | It is important when looking at problems to not just be looking at coding up an algorithm but looking at it as something different and interesting | Am I learning? Am I passionate? | Ask questions in interviews and learn during them | Many people will tell you no, but that does not mean to give up | Failure is inevitable and will happen but failure is the best place to learn and succeed. | .",
            "url": "https://clairehzhao.github.io/claire/week9/markdown/2022/10/18/qualcommmeeting.html",
            "relUrl": "/week9/markdown/2022/10/18/qualcommmeeting.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "College Board Project Program Design",
            "content": "Row 1: Program Purpose and Function . Input: Artist Name and Album . Output: Album duration, album song names, number of songs, album cover photo The purpose of this program is to provide users with data about their favorite artists including their albums, songs, and album duration and allow them to choose their favorite artists. . Row 2: Data Abstraction . Data about song and artists stored in dictionary which is retrieved using API . Row 3: Managing Complexity . use a function to read user input and only provide wanted album information allowing user to use favorites tab to organize the artists they enjoy . Row 4: Procedural Abstraction . using artist (album), retrieve only wanted data from the dictionary. call developed function to run based on user input. . Row 5: Algorithm Implementation . develop algorithim to count number of songs in album given API data algorithm to create ‘favorite artists’ tab, where users can select their favorite artists to be saved in a seperate section of the application . Row 6: Testing . Input multiple artists and album. See if each selected data type displays proper data. Add artists to ‘favorites’ and see if that data is stored . Screens . .",
            "url": "https://clairehzhao.github.io/claire/week7/markdown/2022/10/07/projectplanning.html",
            "relUrl": "/week7/markdown/2022/10/07/projectplanning.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "API Example",
            "content": "Using API and generating all of the languages that are available with this translator . import requests url = &quot;https://text-translator2.p.rapidapi.com/getLanguages&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;4a1e45ca8dmshcde31ef8a5baed3p1a2a7ejsn9952d2cf96bd&quot;, &quot;X-RapidAPI-Host&quot;: &quot;text-translator2.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . { &#34;data&#34;: { &#34;languages&#34;: [ { &#34;code&#34;: &#34;af&#34;, &#34;name&#34;: &#34;Afrikaans&#34; }, { &#34;code&#34;: &#34;sq&#34;, &#34;name&#34;: &#34;Albanian&#34; }, { &#34;code&#34;: &#34;am&#34;, &#34;name&#34;: &#34;Amharic&#34; }, { &#34;code&#34;: &#34;ar&#34;, &#34;name&#34;: &#34;Arabic&#34; }, { &#34;code&#34;: &#34;hy&#34;, &#34;name&#34;: &#34;Armenian&#34; }, { &#34;code&#34;: &#34;az&#34;, &#34;name&#34;: &#34;Azerbaijani&#34; }, { &#34;code&#34;: &#34;eu&#34;, &#34;name&#34;: &#34;Basque&#34; }, { &#34;code&#34;: &#34;be&#34;, &#34;name&#34;: &#34;Belarusian&#34; }, { &#34;code&#34;: &#34;bn&#34;, &#34;name&#34;: &#34;Bengali&#34; }, { &#34;code&#34;: &#34;bs&#34;, &#34;name&#34;: &#34;Bosnian&#34; }, { &#34;code&#34;: &#34;bg&#34;, &#34;name&#34;: &#34;Bulgarian&#34; }, { &#34;code&#34;: &#34;ca&#34;, &#34;name&#34;: &#34;Catalan&#34; }, { &#34;code&#34;: &#34;ceb&#34;, &#34;name&#34;: &#34;Cebuano&#34; }, { &#34;code&#34;: &#34;ny&#34;, &#34;name&#34;: &#34;Chichewa&#34; }, { &#34;code&#34;: &#34;zh-CN&#34;, &#34;name&#34;: &#34;Chinese (Simplified)&#34; }, { &#34;code&#34;: &#34;zh-TW&#34;, &#34;name&#34;: &#34;Chinese (Traditional)&#34; }, { &#34;code&#34;: &#34;co&#34;, &#34;name&#34;: &#34;Corsican&#34; }, { &#34;code&#34;: &#34;hr&#34;, &#34;name&#34;: &#34;Croatian&#34; }, { &#34;code&#34;: &#34;cs&#34;, &#34;name&#34;: &#34;Czech&#34; }, { &#34;code&#34;: &#34;da&#34;, &#34;name&#34;: &#34;Danish&#34; }, { &#34;code&#34;: &#34;nl&#34;, &#34;name&#34;: &#34;Dutch&#34; }, { &#34;code&#34;: &#34;en&#34;, &#34;name&#34;: &#34;English&#34; }, { &#34;code&#34;: &#34;eo&#34;, &#34;name&#34;: &#34;Esperanto&#34; }, { &#34;code&#34;: &#34;et&#34;, &#34;name&#34;: &#34;Estonian&#34; }, { &#34;code&#34;: &#34;tl&#34;, &#34;name&#34;: &#34;Filipino&#34; }, { &#34;code&#34;: &#34;fi&#34;, &#34;name&#34;: &#34;Finnish&#34; }, { &#34;code&#34;: &#34;fr&#34;, &#34;name&#34;: &#34;French&#34; }, { &#34;code&#34;: &#34;fy&#34;, &#34;name&#34;: &#34;Frisian&#34; }, { &#34;code&#34;: &#34;gl&#34;, &#34;name&#34;: &#34;Galician&#34; }, { &#34;code&#34;: &#34;ka&#34;, &#34;name&#34;: &#34;Georgian&#34; }, { &#34;code&#34;: &#34;de&#34;, &#34;name&#34;: &#34;German&#34; }, { &#34;code&#34;: &#34;el&#34;, &#34;name&#34;: &#34;Greek&#34; }, { &#34;code&#34;: &#34;gu&#34;, &#34;name&#34;: &#34;Gujarati&#34; }, { &#34;code&#34;: &#34;ht&#34;, &#34;name&#34;: &#34;Haitian Creole&#34; }, { &#34;code&#34;: &#34;ha&#34;, &#34;name&#34;: &#34;Hausa&#34; }, { &#34;code&#34;: &#34;haw&#34;, &#34;name&#34;: &#34;Hawaiian&#34; }, { &#34;code&#34;: &#34;iw&#34;, &#34;name&#34;: &#34;Hebrew&#34; }, { &#34;code&#34;: &#34;hi&#34;, &#34;name&#34;: &#34;Hindi&#34; }, { &#34;code&#34;: &#34;hmn&#34;, &#34;name&#34;: &#34;Hmong&#34; }, { &#34;code&#34;: &#34;hu&#34;, &#34;name&#34;: &#34;Hungarian&#34; }, { &#34;code&#34;: &#34;is&#34;, &#34;name&#34;: &#34;Icelandic&#34; }, { &#34;code&#34;: &#34;ig&#34;, &#34;name&#34;: &#34;Igbo&#34; }, { &#34;code&#34;: &#34;id&#34;, &#34;name&#34;: &#34;Indonesian&#34; }, { &#34;code&#34;: &#34;ga&#34;, &#34;name&#34;: &#34;Irish&#34; }, { &#34;code&#34;: &#34;it&#34;, &#34;name&#34;: &#34;Italian&#34; }, { &#34;code&#34;: &#34;ja&#34;, &#34;name&#34;: &#34;Japanese&#34; }, { &#34;code&#34;: &#34;jw&#34;, &#34;name&#34;: &#34;Javanese&#34; }, { &#34;code&#34;: &#34;kn&#34;, &#34;name&#34;: &#34;Kannada&#34; }, { &#34;code&#34;: &#34;kk&#34;, &#34;name&#34;: &#34;Kazakh&#34; }, { &#34;code&#34;: &#34;km&#34;, &#34;name&#34;: &#34;Khmer&#34; }, { &#34;code&#34;: &#34;rw&#34;, &#34;name&#34;: &#34;Kinyarwanda&#34; }, { &#34;code&#34;: &#34;ko&#34;, &#34;name&#34;: &#34;Korean&#34; }, { &#34;code&#34;: &#34;ku&#34;, &#34;name&#34;: &#34;Kurdish (Kurmanji)&#34; }, { &#34;code&#34;: &#34;ky&#34;, &#34;name&#34;: &#34;Kyrgyz&#34; }, { &#34;code&#34;: &#34;lo&#34;, &#34;name&#34;: &#34;Lao&#34; }, { &#34;code&#34;: &#34;la&#34;, &#34;name&#34;: &#34;Latin&#34; }, { &#34;code&#34;: &#34;lv&#34;, &#34;name&#34;: &#34;Latvian&#34; }, { &#34;code&#34;: &#34;lt&#34;, &#34;name&#34;: &#34;Lithuanian&#34; }, { &#34;code&#34;: &#34;lb&#34;, &#34;name&#34;: &#34;Luxembourgish&#34; }, { &#34;code&#34;: &#34;mk&#34;, &#34;name&#34;: &#34;Macedonian&#34; }, { &#34;code&#34;: &#34;mg&#34;, &#34;name&#34;: &#34;Malagasy&#34; }, { &#34;code&#34;: &#34;ms&#34;, &#34;name&#34;: &#34;Malay&#34; }, { &#34;code&#34;: &#34;ml&#34;, &#34;name&#34;: &#34;Malayalam&#34; }, { &#34;code&#34;: &#34;mt&#34;, &#34;name&#34;: &#34;Maltese&#34; }, { &#34;code&#34;: &#34;mi&#34;, &#34;name&#34;: &#34;Maori&#34; }, { &#34;code&#34;: &#34;mr&#34;, &#34;name&#34;: &#34;Marathi&#34; }, { &#34;code&#34;: &#34;mn&#34;, &#34;name&#34;: &#34;Mongolian&#34; }, { &#34;code&#34;: &#34;my&#34;, &#34;name&#34;: &#34;Myanmar (Burmese)&#34; }, { &#34;code&#34;: &#34;ne&#34;, &#34;name&#34;: &#34;Nepali&#34; }, { &#34;code&#34;: &#34;no&#34;, &#34;name&#34;: &#34;Norwegian&#34; }, { &#34;code&#34;: &#34;or&#34;, &#34;name&#34;: &#34;Odia (Oriya)&#34; }, { &#34;code&#34;: &#34;ps&#34;, &#34;name&#34;: &#34;Pashto&#34; }, { &#34;code&#34;: &#34;fa&#34;, &#34;name&#34;: &#34;Persian&#34; }, { &#34;code&#34;: &#34;pl&#34;, &#34;name&#34;: &#34;Polish&#34; }, { &#34;code&#34;: &#34;pt&#34;, &#34;name&#34;: &#34;Portuguese&#34; }, { &#34;code&#34;: &#34;pa&#34;, &#34;name&#34;: &#34;Punjabi&#34; }, { &#34;code&#34;: &#34;ro&#34;, &#34;name&#34;: &#34;Romanian&#34; }, { &#34;code&#34;: &#34;ru&#34;, &#34;name&#34;: &#34;Russian&#34; }, { &#34;code&#34;: &#34;sm&#34;, &#34;name&#34;: &#34;Samoan&#34; }, { &#34;code&#34;: &#34;gd&#34;, &#34;name&#34;: &#34;Scots Gaelic&#34; }, { &#34;code&#34;: &#34;sr&#34;, &#34;name&#34;: &#34;Serbian&#34; }, { &#34;code&#34;: &#34;st&#34;, &#34;name&#34;: &#34;Sesotho&#34; }, { &#34;code&#34;: &#34;sn&#34;, &#34;name&#34;: &#34;Shona&#34; }, { &#34;code&#34;: &#34;sd&#34;, &#34;name&#34;: &#34;Sindhi&#34; }, { &#34;code&#34;: &#34;si&#34;, &#34;name&#34;: &#34;Sinhala&#34; }, { &#34;code&#34;: &#34;sk&#34;, &#34;name&#34;: &#34;Slovak&#34; }, { &#34;code&#34;: &#34;sl&#34;, &#34;name&#34;: &#34;Slovenian&#34; }, { &#34;code&#34;: &#34;so&#34;, &#34;name&#34;: &#34;Somali&#34; }, { &#34;code&#34;: &#34;es&#34;, &#34;name&#34;: &#34;Spanish&#34; }, { &#34;code&#34;: &#34;su&#34;, &#34;name&#34;: &#34;Sundanese&#34; }, { &#34;code&#34;: &#34;sw&#34;, &#34;name&#34;: &#34;Swahili&#34; }, { &#34;code&#34;: &#34;sv&#34;, &#34;name&#34;: &#34;Swedish&#34; }, { &#34;code&#34;: &#34;tg&#34;, &#34;name&#34;: &#34;Tajik&#34; }, { &#34;code&#34;: &#34;ta&#34;, &#34;name&#34;: &#34;Tamil&#34; }, { &#34;code&#34;: &#34;tt&#34;, &#34;name&#34;: &#34;Tatar&#34; }, { &#34;code&#34;: &#34;te&#34;, &#34;name&#34;: &#34;Telugu&#34; }, { &#34;code&#34;: &#34;th&#34;, &#34;name&#34;: &#34;Thai&#34; }, { &#34;code&#34;: &#34;tr&#34;, &#34;name&#34;: &#34;Turkish&#34; }, { &#34;code&#34;: &#34;tk&#34;, &#34;name&#34;: &#34;Turkmen&#34; }, { &#34;code&#34;: &#34;uk&#34;, &#34;name&#34;: &#34;Ukrainian&#34; }, { &#34;code&#34;: &#34;ur&#34;, &#34;name&#34;: &#34;Urdu&#34; }, { &#34;code&#34;: &#34;ug&#34;, &#34;name&#34;: &#34;Uyghur&#34; }, { &#34;code&#34;: &#34;uz&#34;, &#34;name&#34;: &#34;Uzbek&#34; }, { &#34;code&#34;: &#34;vi&#34;, &#34;name&#34;: &#34;Vietnamese&#34; }, { &#34;code&#34;: &#34;cy&#34;, &#34;name&#34;: &#34;Welsh&#34; }, { &#34;code&#34;: &#34;xh&#34;, &#34;name&#34;: &#34;Xhosa&#34; }, { &#34;code&#34;: &#34;yi&#34;, &#34;name&#34;: &#34;Yiddish&#34; }, { &#34;code&#34;: &#34;yo&#34;, &#34;name&#34;: &#34;Yoruba&#34; }, { &#34;code&#34;: &#34;zu&#34;, &#34;name&#34;: &#34;Zulu&#34; }, { &#34;code&#34;: &#34;he&#34;, &#34;name&#34;: &#34;Hebrew&#34; }, { &#34;code&#34;: &#34;zh&#34;, &#34;name&#34;: &#34;Chinese (Simplified)&#34; } ] } } . Using API to generate the words &quot;Hey! How are you?&quot; in Hawaiian . import requests url = &quot;https://text-translator2.p.rapidapi.com/translate&quot; payload = &quot;source_language=en&amp;target_language=haw&amp;text=Hey!%20How%20are%20you%3F&quot; headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;X-RapidAPI-Key&quot;: &quot;4a1e45ca8dmshcde31ef8a5baed3p1a2a7ejsn9952d2cf96bd&quot;, &quot;X-RapidAPI-Host&quot;: &quot;text-translator2.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, data=payload, headers=headers) print(response.text) . { &#34;status&#34;: &#34;success&#34;, &#34;data&#34;: { &#34;translatedText&#34;: &#34;Aloha! Pehea u02bboe?&#34; } } .",
            "url": "https://clairehzhao.github.io/claire/notebooks/APIexample",
            "relUrl": "/notebooks/APIexample",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;4a1e45ca8dmshcde31ef8a5baed3p1a2a7ejsn9952d2cf96bd&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # print(response.json()) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4a1e45ca8dmshcde31ef8a5baed3p1a2a7ejsn9952d2cf96bd&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1500,&#34;totalCoins&#34;:15880,&#34;totalMarkets&#34;:29495,&#34;totalExchanges&#34;:173,&#34;totalMarketCap&#34;:&#34;984050205993&#34;,&#34;total24hVolume&#34;:&#34;62372323481&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;384183247686&#34;,&#34;price&#34;:&#34;20039.446762290387&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.19&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20049.815416539706&#34;,&#34;20094.393545497052&#34;,&#34;20158.58698671382&#34;,&#34;20232.898003614322&#34;,&#34;20293.618431388033&#34;,&#34;20355.557600474516&#34;,&#34;20337.9076796474&#34;,&#34;20378.945224236224&#34;,&#34;20339.414870489745&#34;,&#34;20264.990263682765&#34;,&#34;20214.108582714292&#34;,&#34;20193.761930672114&#34;,&#34;20158.951877271087&#34;,&#34;20136.89567880366&#34;,&#34;20148.0982758071&#34;,&#34;20216.514371856883&#34;,&#34;20200.289873786565&#34;,&#34;20114.64889949858&#34;,&#34;20013.833027178112&#34;,&#34;20064.500867424038&#34;,&#34;20055.394308319686&#34;,&#34;20099.910720100273&#34;,&#34;20073.04610540898&#34;,&#34;20038.091723195073&#34;,&#34;20039.125781049443&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;41035986662&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;166713604830&#34;,&#34;price&#34;:&#34;1362.9652882542878&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.99&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1349.0384567537553&#34;,&#34;1350.486586991934&#34;,&#34;1353.0627871586412&#34;,&#34;1361.5377625273948&#34;,&#34;1374.2027236665588&#34;,&#34;1375.7214408982059&#34;,&#34;1373.1173416682698&#34;,&#34;1375.6203205822255&#34;,&#34;1374.5833968999716&#34;,&#34;1369.002110485522&#34;,&#34;1366.1188984768796&#34;,&#34;1363.745025823938&#34;,&#34;1360.3770675480944&#34;,&#34;1358.4329430526363&#34;,&#34;1359.8137982327592&#34;,&#34;1368.3883772574375&#34;,&#34;1369.125079203522&#34;,&#34;1365.0271243860136&#34;,&#34;1362.4695763330856&#34;,&#34;1364.5539706587408&#34;,&#34;1363.1033233537237&#34;,&#34;1364.3554683087928&#34;,&#34;1361.7063757927622&#34;,&#34;1358.8381283825643&#34;,&#34;1360.3494896776085&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;14093465397&#34;,&#34;btcPrice&#34;:&#34;0.06801411757629326&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68239690380&#34;,&#34;price&#34;:&#34;1.0003975210542093&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.11&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.0007218035748657&#34;,&#34;0.9998195240120525&#34;,&#34;1.0001942073599759&#34;,&#34;0.999198242906088&#34;,&#34;0.999970326331934&#34;,&#34;0.9999578602237212&#34;,&#34;1.0002749344768964&#34;,&#34;0.9998618718046304&#34;,&#34;1.0006329886842509&#34;,&#34;1.0010446040777476&#34;,&#34;1.0004916026440913&#34;,&#34;1.0007888640527003&#34;,&#34;1.0002640858839233&#34;,&#34;1.0005846915246637&#34;,&#34;1.0000905108537632&#34;,&#34;0.9994968342509783&#34;,&#34;1.0011082125129211&#34;,&#34;1.0015062761537357&#34;,&#34;0.99991903402945&#34;,&#34;1.0002947247279268&#34;,&#34;0.9999857036550877&#34;,&#34;0.9998206366656677&#34;,&#34;1.0007565219107768&#34;,&#34;1.000382762100078&#34;,&#34;1.000150515797916&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;40440837276&#34;,&#34;btcPrice&#34;:&#34;0.000049921414144862&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46271891771&#34;,&#34;price&#34;:&#34;1.0002935684000565&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.07&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0005863270210245&#34;,&#34;0.9998825447125274&#34;,&#34;1.0001565051935892&#34;,&#34;0.9992645129007548&#34;,&#34;0.9998675462392212&#34;,&#34;0.9998272931691644&#34;,&#34;1.0002224153445407&#34;,&#34;0.9999317743533871&#34;,&#34;1.0006585942367816&#34;,&#34;1.000952432863041&#34;,&#34;1.0003989295505482&#34;,&#34;1.000638496717557&#34;,&#34;1.0002352785325133&#34;,&#34;1.0005941664435252&#34;,&#34;1.0001179673001188&#34;,&#34;0.9994925842454877&#34;,&#34;1.0009754698769568&#34;,&#34;1.0014336424001&#34;,&#34;1.000039268414544&#34;,&#34;1.0002099832307998&#34;,&#34;1.00012589477054&#34;,&#34;0.9998248228490436&#34;,&#34;1.000699890105951&#34;,&#34;1.000340215196537&#34;,&#34;1.0001150874319509&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3359545108&#34;,&#34;btcPrice&#34;:&#34;0.000049916226743464&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;41789744508&#34;,&#34;price&#34;:&#34;288.4522622029406&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.51&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;293.0648258481622&#34;,&#34;293.07747587851765&#34;,&#34;293.8892235863702&#34;,&#34;294.692062571157&#34;,&#34;297.0994193910956&#34;,&#34;296.5460033456306&#34;,&#34;296.5992676846958&#34;,&#34;296.31121173116384&#34;,&#34;295.9763936716012&#34;,&#34;295.45727286275803&#34;,&#34;294.73322587331967&#34;,&#34;295.1813004084462&#34;,&#34;294.52442391454343&#34;,&#34;294.3063124553447&#34;,&#34;294.21373025374237&#34;,&#34;294.75035855506684&#34;,&#34;294.44940982235465&#34;,&#34;293.9815395477355&#34;,&#34;293.6440321116512&#34;,&#34;294.01889977490123&#34;,&#34;293.68331743186303&#34;,&#34;293.4934818966126&#34;,&#34;293.237747035524&#34;,&#34;293.09977258234545&#34;,&#34;290.53744555276114&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;956820661&#34;,&#34;btcPrice&#34;:&#34;0.014394222835819058&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24964399822&#34;,&#34;price&#34;:&#34;0.5007042313091515&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.12&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.4938981661775617&#34;,&#34;0.49343949277953586&#34;,&#34;0.49137790768876555&#34;,&#34;0.4914838199245121&#34;,&#34;0.49555594870572434&#34;,&#34;0.4951890037750714&#34;,&#34;0.495754600642816&#34;,&#34;0.49961106217113954&#34;,&#34;0.5027605293364544&#34;,&#34;0.49962279916372687&#34;,&#34;0.4953862217102938&#34;,&#34;0.49411321871723957&#34;,&#34;0.49379968350472936&#34;,&#34;0.4946781782257021&#34;,&#34;0.49668492450937674&#34;,&#34;0.4980449756635561&#34;,&#34;0.4988427519496724&#34;,&#34;0.49595508147106043&#34;,&#34;0.49529670080659266&#34;,&#34;0.4959093546110407&#34;,&#34;0.4965287083276942&#34;,&#34;0.4972253140887907&#34;,&#34;0.49684091430008437&#34;,&#34;0.49591972510691007&#34;,&#34;0.49994566065984875&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;2376358358&#34;,&#34;btcPrice&#34;:&#34;0.000024985930861692&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21387620181&#34;,&#34;price&#34;:&#34;1.0002796510458298&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.09&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.0006911778549377&#34;,&#34;0.9998223006382758&#34;,&#34;1.0001331288898294&#34;,&#34;0.9991026459307589&#34;,&#34;0.9998674015440719&#34;,&#34;0.9998433930969712&#34;,&#34;1.0001634369759003&#34;,&#34;0.999743197805345&#34;,&#34;1.0005842712581856&#34;,&#34;1.0010101947902401&#34;,&#34;1.0003801992349832&#34;,&#34;1.000693822164607&#34;,&#34;1.0001716820530642&#34;,&#34;1.0004873849756009&#34;,&#34;0.9999973782619707&#34;,&#34;0.9994223622813375&#34;,&#34;1.0009911799051412&#34;,&#34;1.001418278872234&#34;,&#34;0.9999440421681933&#34;,&#34;1.0002616666743402&#34;,&#34;0.9998929494511372&#34;,&#34;0.9996520830568972&#34;,&#34;1.0006716767140225&#34;,&#34;1.000354378405346&#34;,&#34;1.0001279201895084&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6304650961&#34;,&#34;btcPrice&#34;:&#34;0.000049915532245537&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13371936618&#34;,&#34;price&#34;:&#34;0.42979327197785167&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.11&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.42935079509289215&#34;,&#34;0.42999716955939554&#34;,&#34;0.43113793091933544&#34;,&#34;0.43164235605366286&#34;,&#34;0.4351709066340561&#34;,&#34;0.4357776886667802&#34;,&#34;0.43477220488691914&#34;,&#34;0.435032637484956&#34;,&#34;0.43469659246229525&#34;,&#34;0.43367955301045125&#34;,&#34;0.4325764108641088&#34;,&#34;0.4320905081460968&#34;,&#34;0.43129495367629755&#34;,&#34;0.43111268550308746&#34;,&#34;0.430158477187354&#34;,&#34;0.43192082025335765&#34;,&#34;0.4318813080231911&#34;,&#34;0.4305808119251774&#34;,&#34;0.42933152537844466&#34;,&#34;0.42999164634507475&#34;,&#34;0.4297017943321375&#34;,&#34;0.4300182000032324&#34;,&#34;0.42942447696635627&#34;,&#34;0.428848003593003&#34;,&#34;0.4291040903865556&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;466370239&#34;,&#34;btcPrice&#34;:&#34;0.00002144736214907&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11984756181&#34;,&#34;price&#34;:&#34;33.738808515018306&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.03&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;33.76194937947399&#34;,&#34;33.83018839969452&#34;,&#34;34.013048292328065&#34;,&#34;34.22695861442601&#34;,&#34;34.302948506263874&#34;,&#34;34.36117055139888&#34;,&#34;34.33297730862471&#34;,&#34;34.37725515202584&#34;,&#34;34.38122367897517&#34;,&#34;34.2550563983116&#34;,&#34;34.0192701316118&#34;,&#34;34.03538298798629&#34;,&#34;34.021627294260924&#34;,&#34;33.98686067812641&#34;,&#34;33.967205892391455&#34;,&#34;34.10939467413966&#34;,&#34;34.070165431736925&#34;,&#34;33.91930206986467&#34;,&#34;33.91151583417362&#34;,&#34;33.9043511309003&#34;,&#34;33.87901060721445&#34;,&#34;33.78369211116179&#34;,&#34;33.71997962675008&#34;,&#34;33.69090443012692&#34;,&#34;33.71623046280206&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;1268710766&#34;,&#34;btcPrice&#34;:&#34;0.001683619758331201&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8494396262&#34;,&#34;price&#34;:&#34;0.06402613497018114&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.74&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06433091677136754&#34;,&#34;0.06433630601076162&#34;,&#34;0.06451575976472833&#34;,&#34;0.0650019016600869&#34;,&#34;0.06499257008710045&#34;,&#34;0.06506417867247787&#34;,&#34;0.06570475320958324&#34;,&#34;0.06606716612821471&#34;,&#34;0.06581607679725353&#34;,&#34;0.06558476365046208&#34;,&#34;0.06535626375793624&#34;,&#34;0.06514220430063168&#34;,&#34;0.0652554256706354&#34;,&#34;0.06508627169601806&#34;,&#34;0.065071133950613&#34;,&#34;0.06534515755253277&#34;,&#34;0.06526490146098139&#34;,&#34;0.06491687069450776&#34;,&#34;0.06439252809452549&#34;,&#34;0.06435646052140642&#34;,&#34;0.06399725778730381&#34;,&#34;0.06396797107291348&#34;,&#34;0.0638868184143223&#34;,&#34;0.06395160058327058&#34;,&#34;0.06390259648154385&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;637048060&#34;,&#34;btcPrice&#34;:&#34;0.000003195005118138&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7353146346&#34;,&#34;price&#34;:&#34;0.839815244318403&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.30&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;0.8432829962954229&#34;,&#34;0.849181551492284&#34;,&#34;0.8536201943011714&#34;,&#34;0.8541813180047458&#34;,&#34;0.8515224098574884&#34;,&#34;0.850265179544537&#34;,&#34;0.847322542943578&#34;,&#34;0.8476972952771256&#34;,&#34;0.8471467304336225&#34;,&#34;0.844702158937144&#34;,&#34;0.8449149090388831&#34;,&#34;0.8477264619612334&#34;,&#34;0.8464360624186148&#34;,&#34;0.8435578343312881&#34;,&#34;0.8408577666895115&#34;,&#34;0.8417763852043721&#34;,&#34;0.8402724477206464&#34;,&#34;0.8394910131272694&#34;,&#34;0.8422499081060874&#34;,&#34;0.8433600566558104&#34;,&#34;0.8441214660335867&#34;,&#34;0.8449033953802154&#34;,&#34;0.8423323790199002&#34;,&#34;0.8400413323772581&#34;,&#34;0.8391761182935571&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;364321642&#34;,&#34;btcPrice&#34;:&#34;0.000041908105262603&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7336610814&#34;,&#34;price&#34;:&#34;6.377374952234188&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.25&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;6.399701718761633&#34;,&#34;6.405337242113671&#34;,&#34;6.4266248804229384&#34;,&#34;6.451455659600661&#34;,&#34;6.483491915376635&#34;,&#34;6.501811546262432&#34;,&#34;6.498760844193182&#34;,&#34;6.4976323368143705&#34;,&#34;6.477581013777311&#34;,&#34;6.479927431264483&#34;,&#34;6.44825138763542&#34;,&#34;6.445035181012187&#34;,&#34;6.445523861596261&#34;,&#34;6.437132477606484&#34;,&#34;6.433784796155034&#34;,&#34;6.461347613817356&#34;,&#34;6.45359701099763&#34;,&#34;6.425445253315296&#34;,&#34;6.39160085877377&#34;,&#34;6.391093720701694&#34;,&#34;6.384943624903759&#34;,&#34;6.392553223171491&#34;,&#34;6.381634769644093&#34;,&#34;6.386531769957386&#34;,&#34;6.3726444498480515&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;428961360&#34;,&#34;btcPrice&#34;:&#34;0.00031824106862246&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6649612113&#34;,&#34;price&#34;:&#34;0.000011279014086088&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.72&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011384972187891&#34;,&#34;0.00001139313280198&#34;,&#34;0.000011429580139168&#34;,&#34;0.000011482444529902&#34;,&#34;0.000011517178722671&#34;,&#34;0.000011525811358147&#34;,&#34;0.000011555785322931&#34;,&#34;0.000011591429783261&#34;,&#34;0.000011505189155736&#34;,&#34;0.000011477778399831&#34;,&#34;0.000011435059536425&#34;,&#34;0.000011440807594404&#34;,&#34;0.000011458315362184&#34;,&#34;0.00001147552224329&#34;,&#34;0.000011470428630138&#34;,&#34;0.000011471399104906&#34;,&#34;0.000011432350597095&#34;,&#34;0.00001137306433665&#34;,&#34;0.00001135436977918&#34;,&#34;0.000011335712607523&#34;,&#34;0.0000112856679044&#34;,&#34;0.000011278240158878&#34;,&#34;0.000011288521225872&#34;,&#34;0.000011277331662152&#34;,&#34;0.000011272877294086&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;316164530&#34;,&#34;btcPrice&#34;:&#34;5.62840592e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6330683869&#34;,&#34;price&#34;:&#34;1.0000054930991658&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.09&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;1.000345680785842&#34;,&#34;0.9996768088644196&#34;,&#34;0.9997620874678727&#34;,&#34;0.9991192679426156&#34;,&#34;0.9994334358286668&#34;,&#34;0.9995689641224628&#34;,&#34;0.999907059929403&#34;,&#34;0.9994838161730176&#34;,&#34;1.0000962236419397&#34;,&#34;1.0004931721027528&#34;,&#34;1.0001541324782575&#34;,&#34;1.000218091437778&#34;,&#34;1.0000775986106687&#34;,&#34;1.0001745233050123&#34;,&#34;0.9998284891927446&#34;,&#34;0.9992089913834684&#34;,&#34;1.0003350729355822&#34;,&#34;1.000837274076466&#34;,&#34;1.000174196146555&#34;,&#34;0.9998246186091285&#34;,&#34;0.9999456345235549&#34;,&#34;0.9996364141592559&#34;,&#34;1.0002967167854473&#34;,&#34;1.0001570627449197&#34;,&#34;0.999904577449903&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;122551179&#34;,&#34;btcPrice&#34;:&#34;0.000049901851331592&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5776772590&#34;,&#34;price&#34;:&#34;0.06256231278070609&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.39&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.06235487176617015&#34;,&#34;0.06246245556557078&#34;,&#34;0.06240660740134105&#34;,&#34;0.0623051569646796&#34;,&#34;0.06218981455801479&#34;,&#34;0.06255572539146104&#34;,&#34;0.0628439660805138&#34;,&#34;0.06274927695509415&#34;,&#34;0.0627107369451555&#34;,&#34;0.06257675995151533&#34;,&#34;0.06246244963639836&#34;,&#34;0.06246648153200279&#34;,&#34;0.06255515010008444&#34;,&#34;0.0626855538363504&#34;,&#34;0.06269431118943376&#34;,&#34;0.06269622421769963&#34;,&#34;0.06271032651338038&#34;,&#34;0.06263147559996256&#34;,&#34;0.06255657870269374&#34;,&#34;0.06260234733818545&#34;,&#34;0.0626327865123358&#34;,&#34;0.06265965842332524&#34;,&#34;0.06259846428043739&#34;,&#34;0.0625527668144495&#34;,&#34;0.06255814071224475&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;491077762&#34;,&#34;btcPrice&#34;:&#34;0.000003121958082118&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5505248124&#34;,&#34;price&#34;:&#34;1362.8656027542984&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.86&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1349.1540983542507&#34;,&#34;1350.9005820344698&#34;,&#34;1354.6594355436337&#34;,&#34;1358.5734173716921&#34;,&#34;1372.2393635736669&#34;,&#34;1375.4133500184457&#34;,&#34;1373.8416709111418&#34;,&#34;1374.2684069108268&#34;,&#34;1374.1400838469938&#34;,&#34;1371.4603171603485&#34;,&#34;1367.1477871246873&#34;,&#34;1364.9284617619362&#34;,&#34;1361.7201714566988&#34;,&#34;1361.1063241134766&#34;,&#34;1360.3248820272122&#34;,&#34;1366.892809174286&#34;,&#34;1371.6197874234629&#34;,&#34;1366.9159200066226&#34;,&#34;1362.8988600409152&#34;,&#34;1366.8689057181552&#34;,&#34;1362.432558815354&#34;,&#34;1363.6142123853183&#34;,&#34;1361.516713910733&#34;,&#34;1358.2861519471487&#34;,&#34;1359.081763092871&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;185725420&#34;,&#34;btcPrice&#34;:&#34;0.0680091431126181&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5408831516&#34;,&#34;price&#34;:&#34;6.965229747317768&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;3.22&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.77237184675032&#34;,&#34;6.752824244485618&#34;,&#34;6.78903586558007&#34;,&#34;6.852613624649713&#34;,&#34;6.922872589387299&#34;,&#34;6.9800437339156405&#34;,&#34;6.955259833823376&#34;,&#34;6.928956756162565&#34;,&#34;6.908183341801451&#34;,&#34;6.885823479955376&#34;,&#34;6.88302492770328&#34;,&#34;6.90951236907857&#34;,&#34;6.8662924076116925&#34;,&#34;6.832387980086888&#34;,&#34;6.8358287528435735&#34;,&#34;6.899610932300125&#34;,&#34;6.903413648605297&#34;,&#34;6.852584875134188&#34;,&#34;6.834124932563927&#34;,&#34;6.885688487328152&#34;,&#34;6.893482992926548&#34;,&#34;6.899689058136804&#34;,&#34;6.896256768869965&#34;,&#34;6.914609761551383&#34;,&#34;6.9343013341059585&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;221969950&#34;,&#34;btcPrice&#34;:&#34;0.000347575950071871&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;5073934115&#34;,&#34;price&#34;:&#34;17.136152917302237&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.52&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.251404114211134&#34;,&#34;17.298879643442053&#34;,&#34;17.34808667709875&#34;,&#34;17.426941656132254&#34;,&#34;17.524712176181612&#34;,&#34;17.559899454169962&#34;,&#34;17.523659347405594&#34;,&#34;17.56377672754574&#34;,&#34;17.524960240775005&#34;,&#34;17.446353003633845&#34;,&#34;17.39331328781568&#34;,&#34;17.38090327063859&#34;,&#34;17.338426491525652&#34;,&#34;17.31874848940939&#34;,&#34;17.31874788822459&#34;,&#34;17.36905514019651&#34;,&#34;17.377346974392708&#34;,&#34;17.342553655687343&#34;,&#34;17.293655934579245&#34;,&#34;17.282071615104556&#34;,&#34;17.237339963653017&#34;,&#34;17.233044795101893&#34;,&#34;17.19067306889497&#34;,&#34;17.15822630767925&#34;,&#34;17.140672641632765&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;245996209&#34;,&#34;btcPrice&#34;:&#34;0.000855121058009871&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4904821784&#34;,&#34;price&#34;:&#34;20039.591898217837&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.25&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;20049.66642497842&#34;,&#34;20092.89008901448&#34;,&#34;20156.31521210076&#34;,&#34;20228.25012076666&#34;,&#34;20291.50619456924&#34;,&#34;20351.79757539001&#34;,&#34;20336.52367461082&#34;,&#34;20376.3859154279&#34;,&#34;20335.913915665704&#34;,&#34;20261.657124758975&#34;,&#34;20210.790114424715&#34;,&#34;20191.615756843777&#34;,&#34;20154.36188290003&#34;,&#34;20132.073748759834&#34;,&#34;20147.171142671203&#34;,&#34;20214.145570074834&#34;,&#34;20203.167863028528&#34;,&#34;20116.131327302173&#34;,&#34;20015.300157602727&#34;,&#34;20068.49381930057&#34;,&#34;20057.021271217996&#34;,&#34;20102.828919149106&#34;,&#34;20073.861018847732&#34;,&#34;20038.403097690614&#34;,&#34;20038.08311468349&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;64785148&#34;,&#34;btcPrice&#34;:&#34;1.0000072425116906&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;4081355587&#34;,&#34;price&#34;:&#34;13.110698980265436&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.00&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;12.863612619895465&#34;,&#34;12.963444525296714&#34;,&#34;12.997678258298611&#34;,&#34;13.048598156795691&#34;,&#34;13.119145598919278&#34;,&#34;13.159252370152213&#34;,&#34;13.179334515109312&#34;,&#34;13.162812288821586&#34;,&#34;13.137523424001765&#34;,&#34;13.080422952609398&#34;,&#34;13.018181428331529&#34;,&#34;13.01816072627863&#34;,&#34;12.997563332431673&#34;,&#34;13.00040911300239&#34;,&#34;12.96103537416014&#34;,&#34;13.049347223483762&#34;,&#34;13.10883296707332&#34;,&#34;13.109861122849475&#34;,&#34;13.118013715638133&#34;,&#34;13.323369152698012&#34;,&#34;13.364068556649237&#34;,&#34;13.360583645725319&#34;,&#34;13.192765331800494&#34;,&#34;13.129317631598813&#34;,&#34;13.118222991495855&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;777677069&#34;,&#34;btcPrice&#34;:&#34;0.000654244557536226&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3938022950&#34;,&#34;price&#34;:&#34;15.65020200059106&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.07&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.57172097704591&#34;,&#34;15.554456620212141&#34;,&#34;15.531152169350191&#34;,&#34;15.556004685562852&#34;,&#34;15.616987172488637&#34;,&#34;15.741110499745083&#34;,&#34;15.721654408590974&#34;,&#34;15.754592996825584&#34;,&#34;15.721445252830843&#34;,&#34;15.68570643031886&#34;,&#34;15.65823383824178&#34;,&#34;15.65274198879639&#34;,&#34;15.638152113591332&#34;,&#34;15.64058447581103&#34;,&#34;15.628759017587337&#34;,&#34;15.757353975199504&#34;,&#34;15.773668660699586&#34;,&#34;15.735195225903052&#34;,&#34;15.72396624159747&#34;,&#34;15.715830909975708&#34;,&#34;15.643744434845082&#34;,&#34;15.660195060932544&#34;,&#34;15.658999022239795&#34;,&#34;15.655856778151282&#34;,&#34;15.654867179386539&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;21392114&#34;,&#34;btcPrice&#34;:&#34;0.00078096976359852&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3814284108&#34;,&#34;price&#34;:&#34;53.82441991407311&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.19&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;54.296108361372866&#34;,&#34;54.32415717238681&#34;,&#34;54.49439018324316&#34;,&#34;54.67152392574348&#34;,&#34;54.83000909463735&#34;,&#34;54.86255398531216&#34;,&#34;54.86130988251709&#34;,&#34;54.79707265341012&#34;,&#34;54.775144150456796&#34;,&#34;54.544338354633034&#34;,&#34;54.34839240630121&#34;,&#34;54.36453194625638&#34;,&#34;54.412236016477905&#34;,&#34;54.44769705538203&#34;,&#34;54.483256266826224&#34;,&#34;54.54506340505375&#34;,&#34;54.62803114302299&#34;,&#34;54.459797222345856&#34;,&#34;54.21787091912681&#34;,&#34;54.42668212343763&#34;,&#34;54.208931708912175&#34;,&#34;54.30377964719304&#34;,&#34;54.1510765896623&#34;,&#34;54.05333720555051&#34;,&#34;53.85039125291704&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;406284652&#34;,&#34;btcPrice&#34;:&#34;0.002685923446517408&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3291600166&#34;,&#34;price&#34;:&#34;24.65833280552631&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.17&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;24.686262825924107&#34;,&#34;24.708977698495474&#34;,&#34;24.76275391167715&#34;,&#34;24.88064501336108&#34;,&#34;24.989982623495205&#34;,&#34;25.02527690133806&#34;,&#34;25.03308663631069&#34;,&#34;25.096481543960365&#34;,&#34;25.064183863901825&#34;,&#34;24.97596757960783&#34;,&#34;24.905569462633494&#34;,&#34;24.89019154037575&#34;,&#34;24.8445613227375&#34;,&#34;24.8292849347889&#34;,&#34;24.84149925415407&#34;,&#34;24.952282814824464&#34;,&#34;24.932063335978345&#34;,&#34;24.822069539426963&#34;,&#34;24.733351334137495&#34;,&#34;24.785653785837024&#34;,&#34;24.76947017933385&#34;,&#34;24.784914942129383&#34;,&#34;24.73965728872184&#34;,&#34;24.690109754341304&#34;,&#34;24.66935385291404&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;49830642&#34;,&#34;btcPrice&#34;:&#34;0.001230489698544353&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3270765341&#34;,&#34;price&#34;:&#34;28.120304122103594&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.03&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;27.575456313117428&#34;,&#34;27.57803108679598&#34;,&#34;27.626107083587126&#34;,&#34;27.70394559563783&#34;,&#34;28.153092540695052&#34;,&#34;28.733080515456265&#34;,&#34;28.47990216316137&#34;,&#34;28.460572165061098&#34;,&#34;28.431061767116237&#34;,&#34;28.30996933550255&#34;,&#34;28.14880107797775&#34;,&#34;28.147232527457117&#34;,&#34;28.23587113396939&#34;,&#34;28.318610538497257&#34;,&#34;28.301077005756913&#34;,&#34;28.319715581518935&#34;,&#34;28.2863733832489&#34;,&#34;28.157107329408806&#34;,&#34;28.0337933743752&#34;,&#34;28.0347678850247&#34;,&#34;27.985651572532504&#34;,&#34;27.99967898622159&#34;,&#34;27.982387854306214&#34;,&#34;27.96664744200696&#34;,&#34;28.004800136899878&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;798454465&#34;,&#34;btcPrice&#34;:&#34;0.001403247527522542&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2706429124&#34;,&#34;price&#34;:&#34;148.83966830818844&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.80&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;146.0756556475053&#34;,&#34;146.16539235107626&#34;,&#34;146.17871227201726&#34;,&#34;146.7928043004359&#34;,&#34;147.49601518947418&#34;,&#34;147.78321950861786&#34;,&#34;148.13781758186698&#34;,&#34;149.1182492747765&#34;,&#34;148.11631640525192&#34;,&#34;146.22011551363667&#34;,&#34;145.48374160519077&#34;,&#34;145.4605505013132&#34;,&#34;145.1586337789315&#34;,&#34;145.01493067411195&#34;,&#34;145.03711128039956&#34;,&#34;145.49345796227092&#34;,&#34;145.02611908621574&#34;,&#34;144.61288004369027&#34;,&#34;144.03164405964102&#34;,&#34;144.07844173365186&#34;,&#34;143.9103757491713&#34;,&#34;143.993617802683&#34;,&#34;144.76695721516563&#34;,&#34;145.81285596759292&#34;,&#34;146.21974602320358&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;127446640&#34;,&#34;btcPrice&#34;:&#34;0.007427334201075367&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2464448686&#34;,&#34;price&#34;:&#34;0.3513051442851392&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.07&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.35156176000955314&#34;,&#34;0.3519023270261265&#34;,&#34;0.3528916179200212&#34;,&#34;0.35409161420668545&#34;,&#34;0.356162056262963&#34;,&#34;0.35693330326162703&#34;,&#34;0.3563907953585324&#34;,&#34;0.35750984328530744&#34;,&#34;0.35767252929986604&#34;,&#34;0.35751711842440254&#34;,&#34;0.3558727664559972&#34;,&#34;0.35502576789344964&#34;,&#34;0.35443443094387755&#34;,&#34;0.3542043091822441&#34;,&#34;0.35451487254498265&#34;,&#34;0.35595645150091704&#34;,&#34;0.3550166370140654&#34;,&#34;0.3532171781108639&#34;,&#34;0.3524588059359943&#34;,&#34;0.35338459261762273&#34;,&#34;0.3530591012387088&#34;,&#34;0.3519876831605432&#34;,&#34;0.35133779862985864&#34;,&#34;0.350369179522118&#34;,&#34;0.35078893949386675&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;131543708&#34;,&#34;btcPrice&#34;:&#34;0.000017530680784372&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2434585155&#34;,&#34;price&#34;:&#34;0.12049107004222326&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.14&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11889747925878968&#34;,&#34;0.11895767320851787&#34;,&#34;0.11904150834797811&#34;,&#34;0.11902199852210672&#34;,&#34;0.11927188129997995&#34;,&#34;0.1193386399802927&#34;,&#34;0.11934469276243408&#34;,&#34;0.1196520921041987&#34;,&#34;0.11983688261385989&#34;,&#34;0.11932664504934419&#34;,&#34;0.11894538588331029&#34;,&#34;0.1191377486726544&#34;,&#34;0.11883068387398256&#34;,&#34;0.11871457015480089&#34;,&#34;0.11869976708522932&#34;,&#34;0.11970212293120151&#34;,&#34;0.11966415505513138&#34;,&#34;0.11925782467280538&#34;,&#34;0.11953196796977514&#34;,&#34;0.11947862039947245&#34;,&#34;0.12001460511010423&#34;,&#34;0.12024648180408562&#34;,&#34;0.12015554671534558&#34;,&#34;0.12014362932061814&#34;,&#34;0.12018777537490634&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;290099251&#34;,&#34;btcPrice&#34;:&#34;0.000006012694435705&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2274855177&#34;,&#34;price&#34;:&#34;118.90688552415058&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.81&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;122.31669276815146&#34;,&#34;122.20221632323882&#34;,&#34;122.27062280612596&#34;,&#34;122.55422874145354&#34;,&#34;123.18638724378391&#34;,&#34;123.08308366724447&#34;,&#34;122.75420528237959&#34;,&#34;122.64408519732375&#34;,&#34;122.29556101291895&#34;,&#34;121.67236415586021&#34;,&#34;121.09760099075169&#34;,&#34;121.07402729292667&#34;,&#34;121.3308006968375&#34;,&#34;121.33543159737839&#34;,&#34;121.4165007079705&#34;,&#34;121.79251148020586&#34;,&#34;121.83878634048158&#34;,&#34;121.49073996107514&#34;,&#34;120.72111575922996&#34;,&#34;121.0116341886658&#34;,&#34;120.80463163491193&#34;,&#34;120.70155668283728&#34;,&#34;120.39286719656228&#34;,&#34;119.46060315102883&#34;,&#34;118.90781992190092&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;215982449&#34;,&#34;btcPrice&#34;:&#34;0.005933641129649641&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2256283115&#34;,&#34;price&#34;:&#34;20055.671641854424&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.33&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;20062.922923808146&#34;,&#34;20068.861677407906&#34;,&#34;20151.07969183831&#34;,&#34;20194.09983970884&#34;,&#34;20305.40629467228&#34;,&#34;20343.061967792306&#34;,&#34;20336.436454110953&#34;,&#34;20366.199044829194&#34;,&#34;20353.223182216174&#34;,&#34;20294.402282813175&#34;,&#34;20238.157621291528&#34;,&#34;20222.48623264246&#34;,&#34;20158.081080167794&#34;,&#34;20150.098083292793&#34;,&#34;20140.151248718423&#34;,&#34;20189.026739752426&#34;,&#34;20223.043574030315&#34;,&#34;20141.500488887716&#34;,&#34;20003.562519895528&#34;,&#34;20060.755154122107&#34;,&#34;20033.23621927189&#34;,&#34;20092.4032138555&#34;,&#34;20103.168326479234&#34;,&#34;20047.78028200608&#34;,&#34;20049.12266475747&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;23339484&#34;,&#34;btcPrice&#34;:&#34;1.0008096470804058&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2206759785&#34;,&#34;price&#34;:&#34;0.10972391679276841&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.10&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;0.10961438985623642&#34;,&#34;0.1098841249543377&#34;,&#34;0.11025473159449753&#34;,&#34;0.11062336581339045&#34;,&#34;0.11096926990753721&#34;,&#34;0.11112616986390883&#34;,&#34;0.11111054399289587&#34;,&#34;0.11123574172601472&#34;,&#34;0.11099926911576126&#34;,&#34;0.11063982901865921&#34;,&#34;0.11050965745439092&#34;,&#34;0.11045095222645547&#34;,&#34;0.11017549059501121&#34;,&#34;0.11016734688761708&#34;,&#34;0.11022026683815063&#34;,&#34;0.11068489829349991&#34;,&#34;0.11062776144990603&#34;,&#34;0.1103967719055346&#34;,&#34;0.1101055340281511&#34;,&#34;0.11021340607044186&#34;,&#34;0.11023448571177163&#34;,&#34;0.11038410371678713&#34;,&#34;0.1100857906587621&#34;,&#34;0.10978971382514593&#34;,&#34;0.10968147719562468&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;19333653&#34;,&#34;btcPrice&#34;:&#34;0.000005475396506417&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2206758223&#34;,&#34;price&#34;:&#34;3.6304660705085667&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.42&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;3.676484006822928&#34;,&#34;3.6852601908489664&#34;,&#34;3.6962394641805405&#34;,&#34;3.703159890046674&#34;,&#34;3.7307432286844002&#34;,&#34;3.7313215421676786&#34;,&#34;3.7270747900297017&#34;,&#34;3.7312649322104274&#34;,&#34;3.719144760199497&#34;,&#34;3.6910824300924796&#34;,&#34;3.67193896045483&#34;,&#34;3.6718584377778054&#34;,&#34;3.681569582110444&#34;,&#34;3.682003775707856&#34;,&#34;3.6730232572401142&#34;,&#34;3.686482852048306&#34;,&#34;3.681889488410369&#34;,&#34;3.6602078142241883&#34;,&#34;3.646008662741072&#34;,&#34;3.6540159712077847&#34;,&#34;3.6514182366794388&#34;,&#34;3.6572356414722913&#34;,&#34;3.6510677534150116&#34;,&#34;3.6420121540385253&#34;,&#34;3.6369873371662327&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;168981355&#34;,&#34;btcPrice&#34;:&#34;0.000181165982952197&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1914202951&#34;,&#34;price&#34;:&#34;0.000290435523647882&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.88&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;0.000297671672254111&#34;,&#34;0.000298963973156913&#34;,&#34;0.000301720935856393&#34;,&#34;0.000300113265231995&#34;,&#34;0.000298930284162236&#34;,&#34;0.000301416052150239&#34;,&#34;0.000303244352601534&#34;,&#34;0.000301825527661809&#34;,&#34;0.00030045732086974&#34;,&#34;0.000299635878097677&#34;,&#34;0.000296177179356234&#34;,&#34;0.000294359789811536&#34;,&#34;0.000296200844720792&#34;,&#34;0.000295887381729173&#34;,&#34;0.000296261248957328&#34;,&#34;0.00029695599789668&#34;,&#34;0.000296406217932157&#34;,&#34;0.000295000757723728&#34;,&#34;0.00029565516360448&#34;,&#34;0.000295593404968822&#34;,&#34;0.000294434193736599&#34;,&#34;0.000292263816481774&#34;,&#34;0.000290645791060663&#34;,&#34;0.000291875516993992&#34;,&#34;0.00029218728728002&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;72931913&#34;,&#34;btcPrice&#34;:&#34;1.449319071e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1808820941&#34;,&#34;price&#34;:&#34;1.8088209414637717&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.03&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.8205505524134962&#34;,&#34;1.8242876171474678&#34;,&#34;1.8291343031327176&#34;,&#34;1.8320876869529952&#34;,&#34;1.839386569721581&#34;,&#34;1.834064344910821&#34;,&#34;1.8333753181908716&#34;,&#34;1.8376513295883161&#34;,&#34;1.840233968382716&#34;,&#34;1.8324791678774568&#34;,&#34;1.8232583602123347&#34;,&#34;1.8132643937437805&#34;,&#34;1.8119472585308702&#34;,&#34;1.8090163301680255&#34;,&#34;1.8060426601302288&#34;,&#34;1.8182680306522165&#34;,&#34;1.820594742691741&#34;,&#34;1.8152667672239315&#34;,&#34;1.8077629072924724&#34;,&#34;1.8199553421430261&#34;,&#34;1.8150270056970825&#34;,&#34;1.8112994257344677&#34;,&#34;1.8120289219530683&#34;,&#34;1.802734311661105&#34;,&#34;1.804570864355095&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;12090485&#34;,&#34;btcPrice&#34;:&#34;0.000090263017882687&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1768580116&#34;,&#34;price&#34;:&#34;1.70679416749469&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.38&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.6879637940199872&#34;,&#34;1.6907794219662977&#34;,&#34;1.6944343024351958&#34;,&#34;1.7026071417666502&#34;,&#34;1.7114262181583197&#34;,&#34;1.7143682061268322&#34;,&#34;1.7143997727258644&#34;,&#34;1.7187065908839465&#34;,&#34;1.7113103990166811&#34;,&#34;1.706894909097403&#34;,&#34;1.699364495550604&#34;,&#34;1.7008536378119747&#34;,&#34;1.6971201519957864&#34;,&#34;1.6933155308815548&#34;,&#34;1.6919551440844665&#34;,&#34;1.7002389743593525&#34;,&#34;1.6997584145254834&#34;,&#34;1.6903684560400438&#34;,&#34;1.6857952597429327&#34;,&#34;1.7013464274735857&#34;,&#34;1.7011609882478398&#34;,&#34;1.7066497944706445&#34;,&#34;1.7038258896228677&#34;,&#34;1.699099958838675&#34;,&#34;1.7039657259463465&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;107276609&#34;,&#34;btcPrice&#34;:&#34;0.000085171720943239&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1721646846&#34;,&#34;price&#34;:&#34;17.216468455023016&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.77&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.081778286859773&#34;,&#34;17.067893912066662&#34;,&#34;17.159396834446234&#34;,&#34;17.409304028654628&#34;,&#34;17.350424599499906&#34;,&#34;17.386714429272285&#34;,&#34;17.38858738165633&#34;,&#34;17.59776912523738&#34;,&#34;17.615975294855826&#34;,&#34;17.448303583422675&#34;,&#34;17.32282156665203&#34;,&#34;17.45217875290083&#34;,&#34;17.3201524697605&#34;,&#34;17.37188836117317&#34;,&#34;17.34961857367158&#34;,&#34;17.39732106885539&#34;,&#34;17.40479905360241&#34;,&#34;17.35216582547696&#34;,&#34;17.40256516285308&#34;,&#34;17.566927968143226&#34;,&#34;17.41304480399479&#34;,&#34;17.3605187617024&#34;,&#34;17.153359676722275&#34;,&#34;17.24576945727861&#34;,&#34;17.266518018674518&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;19824373&#34;,&#34;btcPrice&#34;:&#34;0.00085895302304947&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1629988051&#34;,&#34;price&#34;:&#34;5.545926954813813&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.51&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;5.564490867810681&#34;,&#34;5.566111951296787&#34;,&#34;5.573081005993705&#34;,&#34;5.597638107569036&#34;,&#34;5.622372212071733&#34;,&#34;5.621678478547102&#34;,&#34;5.635046338359381&#34;,&#34;5.636819831411602&#34;,&#34;5.621680148394719&#34;,&#34;5.606495156648643&#34;,&#34;5.592319378976973&#34;,&#34;5.593133992474709&#34;,&#34;5.578979507838225&#34;,&#34;5.57060347855348&#34;,&#34;5.56988332957902&#34;,&#34;5.585637764164166&#34;,&#34;5.587779222544867&#34;,&#34;5.569394483098339&#34;,&#34;5.555860681648574&#34;,&#34;5.5657058777971935&#34;,&#34;5.560079505677699&#34;,&#34;5.556640885063307&#34;,&#34;5.544057534440066&#34;,&#34;5.539256395617048&#34;,&#34;5.542528306381236&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;161948268&#34;,&#34;btcPrice&#34;:&#34;0.000276750502177034&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1579619230&#34;,&#34;price&#34;:&#34;6.015139496595263&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.10&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;6.017430234811706&#34;,&#34;6.02397822813975&#34;,&#34;6.026022506481912&#34;,&#34;6.036706330465778&#34;,&#34;6.0617952393602765&#34;,&#34;6.082059364245906&#34;,&#34;6.119003490105678&#34;,&#34;6.121522161601521&#34;,&#34;6.114804820768077&#34;,&#34;6.099161118790063&#34;,&#34;6.060918970841281&#34;,&#34;6.056658651875394&#34;,&#34;6.04440103957183&#34;,&#34;6.040821790391322&#34;,&#34;6.031174470833535&#34;,&#34;6.049477994019767&#34;,&#34;6.05426717892797&#34;,&#34;6.041379962293601&#34;,&#34;6.029851672781251&#34;,&#34;6.029558427355942&#34;,&#34;6.0311271218149605&#34;,&#34;6.046335431217927&#34;,&#34;6.041224463133169&#34;,&#34;6.044501108247701&#34;,&#34;6.026325410969371&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;48947960&#34;,&#34;btcPrice&#34;:&#34;0.000300164948062058&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1571922336&#34;,&#34;price&#34;:&#34;0.023545609372721175&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.81&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.0237503648773653&#34;,&#34;0.023780799909472596&#34;,&#34;0.023856466417581195&#34;,&#34;0.02395339578538322&#34;,&#34;0.024027726003664374&#34;,&#34;0.02406287804956785&#34;,&#34;0.024029150650035552&#34;,&#34;0.02403165474416971&#34;,&#34;0.024007492514989702&#34;,&#34;0.023892749313038426&#34;,&#34;0.0237918988352485&#34;,&#34;0.02383663125658556&#34;,&#34;0.023815944952803175&#34;,&#34;0.02375987595684638&#34;,&#34;0.023747958190055547&#34;,&#34;0.023865382445108305&#34;,&#34;0.023886060705063935&#34;,&#34;0.023777291343685534&#34;,&#34;0.023683636546103736&#34;,&#34;0.023735592242398316&#34;,&#34;0.02368280508302678&#34;,&#34;0.02367337299793166&#34;,&#34;0.023608947936034432&#34;,&#34;0.023559309178789255&#34;,&#34;0.023545909556068136&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;65209458&#34;,&#34;btcPrice&#34;:&#34;0.000001174963044241&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1555049030&#34;,&#34;price&#34;:&#34;4.675641982219476&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.29&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;4.661700930843492&#34;,&#34;4.662153786655901&#34;,&#34;4.669629519650637&#34;,&#34;4.6965206988350126&#34;,&#34;4.729693628603321&#34;,&#34;4.7140657358610465&#34;,&#34;4.72362675311866&#34;,&#34;4.726446209779176&#34;,&#34;4.717613624950668&#34;,&#34;4.704697941989018&#34;,&#34;4.698207502891328&#34;,&#34;4.7021832565717405&#34;,&#34;4.692520565338738&#34;,&#34;4.678139048018588&#34;,&#34;4.690446866999542&#34;,&#34;4.720676195685006&#34;,&#34;4.723733692086486&#34;,&#34;4.711911967477252&#34;,&#34;4.721038716505375&#34;,&#34;4.7278197954085766&#34;,&#34;4.7261855548331395&#34;,&#34;4.730859273583328&#34;,&#34;4.724423267167681&#34;,&#34;4.721094329268203&#34;,&#34;4.698009240688784&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;43891747&#34;,&#34;btcPrice&#34;:&#34;0.00023332190941608&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1535790546&#34;,&#34;price&#34;:&#34;0.7001551162804869&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.31&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.701977034723851&#34;,&#34;0.7011237829156313&#34;,&#34;0.7022081935423256&#34;,&#34;0.704347215334535&#34;,&#34;0.7057336965233337&#34;,&#34;0.7090636534769581&#34;,&#34;0.7106615358646469&#34;,&#34;0.7109962681888046&#34;,&#34;0.7099719076767776&#34;,&#34;0.7082023207228123&#34;,&#34;0.7050468491660892&#34;,&#34;0.7072911038373654&#34;,&#34;0.7052069405945084&#34;,&#34;0.7045672897680095&#34;,&#34;0.7039823074677339&#34;,&#34;0.7064319311458693&#34;,&#34;0.7061251224914128&#34;,&#34;0.7035537471979324&#34;,&#34;0.70119909731761&#34;,&#34;0.7012006334450854&#34;,&#34;0.700378912113366&#34;,&#34;0.7006616578748375&#34;,&#34;0.7002263140262767&#34;,&#34;0.7005970156301706&#34;,&#34;0.7000471371939851&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;196625368&#34;,&#34;btcPrice&#34;:&#34;0.000034938844599144&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1528709038&#34;,&#34;price&#34;:&#34;0.7643545191368988&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.83&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.7863788485157178&#34;,&#34;0.7855541947236996&#34;,&#34;0.7859794469303182&#34;,&#34;0.7910897411189671&#34;,&#34;0.793054017744364&#34;,&#34;0.7920608982909317&#34;,&#34;0.7932732662277912&#34;,&#34;0.7937358349094242&#34;,&#34;0.7899013972015532&#34;,&#34;0.7873715826948282&#34;,&#34;0.7828939261430061&#34;,&#34;0.7830596769363658&#34;,&#34;0.781549984261565&#34;,&#34;0.7776641064358721&#34;,&#34;0.774477413274178&#34;,&#34;0.7796249547306316&#34;,&#34;0.7785003478970451&#34;,&#34;0.7744517162811705&#34;,&#34;0.7716980943097198&#34;,&#34;0.7718465182090138&#34;,&#34;0.7695939089125774&#34;,&#34;0.7675475383081616&#34;,&#34;0.7659261335369044&#34;,&#34;0.7647132288808262&#34;,&#34;0.7647155542326465&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;65425755&#34;,&#34;btcPrice&#34;:&#34;0.000038142496058087&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1413082046&#34;,&#34;price&#34;:&#34;0.05804176841732538&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.62&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.057704389710771006&#34;,&#34;0.057720764112458633&#34;,&#34;0.05789434173084646&#34;,&#34;0.05809746344437125&#34;,&#34;0.058189441306718125&#34;,&#34;0.05837589581493919&#34;,&#34;0.058390643995986855&#34;,&#34;0.05842359197073168&#34;,&#34;0.058297064663280294&#34;,&#34;0.05820470132737367&#34;,&#34;0.05807440260764427&#34;,&#34;0.05815803410400219&#34;,&#34;0.05809704013369458&#34;,&#34;0.05804303598748368&#34;,&#34;0.05807196376127004&#34;,&#34;0.05825313502134361&#34;,&#34;0.05829341549445707&#34;,&#34;0.05821978196200451&#34;,&#34;0.05798861981613355&#34;,&#34;0.05802915704007855&#34;,&#34;0.05803221909522417&#34;,&#34;0.05809617434017486&#34;,&#34;0.05803719408534143&#34;,&#34;0.05798158873479129&#34;,&#34;0.05799300122328515&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;46605820&#34;,&#34;btcPrice&#34;:&#34;0.000002896375788505&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1360062542&#34;,&#34;price&#34;:&#34;1.00147039163026&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.11&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;1.0000268231187786&#34;,&#34;0.9993388779781252&#34;,&#34;0.9994407930086252&#34;,&#34;0.9986229045501516&#34;,&#34;0.9990744412957507&#34;,&#34;0.9990768091269389&#34;,&#34;0.999533163749183&#34;,&#34;0.9992798589768088&#34;,&#34;0.9998864958466837&#34;,&#34;1.0002316433678111&#34;,&#34;0.9997435605750601&#34;,&#34;0.9999510736256771&#34;,&#34;0.9995877887400998&#34;,&#34;0.999783294319345&#34;,&#34;0.9993800980597954&#34;,&#34;0.9989024781788758&#34;,&#34;1.0002727567604988&#34;,&#34;1.0007528006058746&#34;,&#34;0.9996998053122591&#34;,&#34;0.999539311284952&#34;,&#34;0.9995986423076254&#34;,&#34;0.9991918993229284&#34;,&#34;0.9999917500713156&#34;,&#34;0.999743821552415&#34;,&#34;1.0010968947138141&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;7191162&#34;,&#34;btcPrice&#34;:&#34;0.000049974952078757&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1352903347&#34;,&#34;price&#34;:&#34;138.37278210109568&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.11&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;136.86641854250846&#34;,&#34;137.61943864188262&#34;,&#34;138.02288004406574&#34;,&#34;138.71450262820792&#34;,&#34;139.15753412769195&#34;,&#34;139.0288846982766&#34;,&#34;139.1402037166419&#34;,&#34;138.93629469593716&#34;,&#34;138.16451460952393&#34;,&#34;137.36487381286946&#34;,&#34;137.47323036753917&#34;,&#34;139.47069461255214&#34;,&#34;138.96967914045058&#34;,&#34;139.3198390416663&#34;,&#34;139.64725230463458&#34;,&#34;140.750058199524&#34;,&#34;139.82120238160806&#34;,&#34;139.62012734518615&#34;,&#34;139.11349157404445&#34;,&#34;139.65833844203283&#34;,&#34;139.23347469831282&#34;,&#34;139.1817083994535&#34;,&#34;138.8991730119048&#34;,&#34;138.13998261945733&#34;,&#34;138.13266569202622&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;34718812&#34;,&#34;btcPrice&#34;:&#34;0.006905020070787648&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1310512736&#34;,&#34;price&#34;:&#34;55.46667255421532&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.71&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;54.53200689084205&#34;,&#34;54.12891435002389&#34;,&#34;54.19623024858422&#34;,&#34;54.633815523213606&#34;,&#34;55.27290146147566&#34;,&#34;55.13168195216286&#34;,&#34;55.385084460868484&#34;,&#34;55.204117457272815&#34;,&#34;55.02695582682979&#34;,&#34;54.88507503357054&#34;,&#34;54.61644563280285&#34;,&#34;54.70849443349061&#34;,&#34;55.03535127585458&#34;,&#34;55.12708543041666&#34;,&#34;55.12441377248144&#34;,&#34;55.100996636927164&#34;,&#34;55.0414585858571&#34;,&#34;54.89583474520678&#34;,&#34;54.830907515321&#34;,&#34;55.07520330106215&#34;,&#34;55.35219440814218&#34;,&#34;55.0085050792647&#34;,&#34;54.82982283174939&#34;,&#34;54.94795813298924&#34;,&#34;55.073705982029324&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;105149146&#34;,&#34;btcPrice&#34;:&#34;0.002767874443449746&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1299284017&#34;,&#34;price&#34;:&#34;1.4306356440566899&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.41&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;1.422154065982087&#34;,&#34;1.4244295761005363&#34;,&#34;1.4277505791732141&#34;,&#34;1.4331687835452782&#34;,&#34;1.443452302749013&#34;,&#34;1.44654853894898&#34;,&#34;1.4430883131864&#34;,&#34;1.4486591676627363&#34;,&#34;1.4453351430074377&#34;,&#34;1.4406990621963756&#34;,&#34;1.4357528630214837&#34;,&#34;1.4364879120875458&#34;,&#34;1.4341300033627156&#34;,&#34;1.433556473760653&#34;,&#34;1.4327812160186728&#34;,&#34;1.438628684956135&#34;,&#34;1.4388288665247424&#34;,&#34;1.4322711706987314&#34;,&#34;1.4239909372154902&#34;,&#34;1.4246489366303339&#34;,&#34;1.4219137536482624&#34;,&#34;1.4281196230913553&#34;,&#34;1.431206588730244&#34;,&#34;1.4310841397804643&#34;,&#34;1.4307637472117907&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;44428113&#34;,&#34;btcPrice&#34;:&#34;0.000071390975061688&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1281805725&#34;,&#34;price&#34;:&#34;0.2157605088231546&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.51&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.2156861139378023&#34;,&#34;0.21533849342523834&#34;,&#34;0.21637084202032117&#34;,&#34;0.2172780853626793&#34;,&#34;0.2185663393777442&#34;,&#34;0.21930091082116046&#34;,&#34;0.21987321663135242&#34;,&#34;0.21925549598692895&#34;,&#34;0.218446742092016&#34;,&#34;0.21799923484351233&#34;,&#34;0.21702029272708792&#34;,&#34;0.2161097068576463&#34;,&#34;0.2157993116882586&#34;,&#34;0.21590901819560568&#34;,&#34;0.21566164758114145&#34;,&#34;0.21624178021000806&#34;,&#34;0.215892046849503&#34;,&#34;0.21496977646657472&#34;,&#34;0.21502311258804033&#34;,&#34;0.21704355142688964&#34;,&#34;0.21765173879422026&#34;,&#34;0.2168903690807956&#34;,&#34;0.2161411090221284&#34;,&#34;0.21595613155613003&#34;,&#34;0.2160416191418896&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;341177777&#34;,&#34;btcPrice&#34;:&#34;0.000010766789691478&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1273310413&#34;,&#34;price&#34;:&#34;0.8491735325773148&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.52&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.8593672603083095&#34;,&#34;0.8592673257045527&#34;,&#34;0.8609659832018245&#34;,&#34;0.8648971108758887&#34;,&#34;0.8663731911826474&#34;,&#34;0.8667122213039231&#34;,&#34;0.8663886523811145&#34;,&#34;0.8668792238690509&#34;,&#34;0.8649624385349067&#34;,&#34;0.8611180516082279&#34;,&#34;0.8585412818383397&#34;,&#34;0.8661515489489221&#34;,&#34;0.8593039298345546&#34;,&#34;0.8547774111127597&#34;,&#34;0.8526806084120415&#34;,&#34;0.8563535288027431&#34;,&#34;0.8564092645541592&#34;,&#34;0.8530767457147056&#34;,&#34;0.8502167147455565&#34;,&#34;0.8516834566430094&#34;,&#34;0.8511666186198831&#34;,&#34;0.8510769601275632&#34;,&#34;0.8485446381486353&#34;,&#34;0.8475518785122093&#34;,&#34;0.8480963950511211&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;105688569&#34;,&#34;btcPrice&#34;:&#34;0.000042375098606777&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1216020604&#34;,&#34;price&#34;:&#34;1.5118573802662103&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.42&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.5152205100915535&#34;,&#34;1.5169429140699267&#34;,&#34;1.52442883963002&#34;,&#34;1.5352051807886449&#34;,&#34;1.5507771914692972&#34;,&#34;1.5584198947059793&#34;,&#34;1.5611709741306992&#34;,&#34;1.5622734158186&#34;,&#34;1.563158380319883&#34;,&#34;1.5530023128237487&#34;,&#34;1.5394541532334183&#34;,&#34;1.5415345344528264&#34;,&#34;1.5397346514776398&#34;,&#34;1.5529429534884351&#34;,&#34;1.5579757035793522&#34;,&#34;1.560667950492334&#34;,&#34;1.5577382798650414&#34;,&#34;1.54511103614271&#34;,&#34;1.527483697189044&#34;,&#34;1.5299531579297556&#34;,&#34;1.5250857787869663&#34;,&#34;1.5243751296124086&#34;,&#34;1.5162105499958185&#34;,&#34;1.5081580664187493&#34;,&#34;1.505515094483018&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;13791441&#34;,&#34;btcPrice&#34;:&#34;0.000075444067802869&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1157071383&#34;,&#34;price&#34;:&#34;1.1705145866523223&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.08&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.1694363470738518&#34;,&#34;1.1705864439187568&#34;,&#34;1.1738525342149835&#34;,&#34;1.178558922119085&#34;,&#34;1.1837969319466126&#34;,&#34;1.1858090386610416&#34;,&#34;1.1862130969952875&#34;,&#34;1.1884443612524698&#34;,&#34;1.1872550267419892&#34;,&#34;1.1834269966357152&#34;,&#34;1.1774580582186247&#34;,&#34;1.176233833106269&#34;,&#34;1.1771650081760523&#34;,&#34;1.1771210586603023&#34;,&#34;1.1806485771743869&#34;,&#34;1.1831210652488116&#34;,&#34;1.182431907948135&#34;,&#34;1.1787638124236466&#34;,&#34;1.1765484036088025&#34;,&#34;1.177234556211267&#34;,&#34;1.1757269076583845&#34;,&#34;1.1752701437192155&#34;,&#34;1.1731499477132676&#34;,&#34;1.1704139722460736&#34;,&#34;1.169172194454326&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;285714689&#34;,&#34;btcPrice&#34;:&#34;0.000058410524029783&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://clairehzhao.github.io/claire/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i) + &quot; letter in the alphabet&quot;) i += 1 . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(&quot;Your total price is : $&quot; + str(menu[item])) . Menu burger $3.99 fries $1.99 drink $0.99 Your total price is : $1.99 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://clairehzhao.github.io/claire/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "College Board 1.1-1.3",
            "content": "Proof of completion of 1.1-1.3 on College Board . .",
            "url": "https://clairehzhao.github.io/claire/week6/markdown/2022/10/01/collegeboard1.1-1.3.html",
            "relUrl": "/week6/markdown/2022/10/01/collegeboard1.1-1.3.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Jupyter JavaScript Kernel",
            "content": "console.log output . The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. . console.log(&quot;Hey Guys!&quot;); . Hey Guys! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . var msg = &quot;Hey Guys!&quot;; console.log(msg) . Hey Guys! . console.log output showing use of function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . function logIt(output) { console.log(output); } logIt(msg); . Hey Guys! . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Hey Y&#39;all&quot;) logIt(&quot;How are you doing?&quot;); logIt(2022) . Hey Y&#39;all How are you doing? 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, don&#39;t have to specify what type of information will be stored in a variable in advance. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Different types of outputs&quot;) logItType(&quot;hey guys&quot;); // String logItType(2022); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Different types of outputs string ; hey guys number ; 2022 object ; [ 1, 2, 3 ] . Build a Person Function/Group object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data | Definition of a prototype allow for the definition of a method associated with the function | Instance of a function | . // define a function to hold data for a Person function Person(name, favcolor, age) { this.name = name; this.favcolor = favcolor; this.age = age; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, favcolor: this.favcolor, age: this.age, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable upperclassmen var upperclassmen = new Person(&quot;Abby&quot;, &quot;pink&quot;, 17); // object type is easy to work with in JavaScript logItType(upperclassmen); // before role logItType(upperclassmen.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher upperclassmen.setRole(&quot;upperclassmen&quot;); // set the role logItType(upperclassmen); logItType(upperclassmen.toJSON()); . object ; Person { name: &#39;Abby&#39;, favcolor: &#39;pink&#39;, age: 17, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Abby&#34;,&#34;favcolor&#34;:&#34;pink&#34;,&#34;age&#34;:17,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Abby&#39;, favcolor: &#39;pink&#39;, age: 17, role: &#39;upperclassmen&#39; } string ; {&#34;name&#34;:&#34;Abby&#34;,&#34;favcolor&#34;:&#34;pink&#34;,&#34;age&#34;:17,&#34;role&#34;:&#34;upperclassmen&#34;} . Create new people in group . // define a student Array of Person(s) var underclassmen = [ new Person(&quot;Olivia&quot;, &quot;purple&quot;, 14), new Person(&quot;Allie&quot;, &quot;green&quot;, 15), new Person(&quot;Claire&quot;, &quot;pink&quot;, 15) ]; // define a group and build Group objects and json function Group(upperclassmen, underclassmen){ // start group with upperclassmen upperclassmen.setRole(&quot;upperclassmen&quot;); this.upperclassmen = upperclassmen; this.group = [upperclassmen]; // add each person to group this.underclassmen = underclassmen; this.underclassmen.forEach(underclassmen =&gt; { underclassmen.setRole(&quot;underclassmen&quot;); this.group.push(underclassmen); }); // build json/string format of group this.json = []; this.group.forEach(person =&gt; this.json.push(person.toJSON())); } // make a del norte group from formerly defined uper and under classmen delnorte = new Group(upperclassmen, underclassmen); // output of Objects and JSON in del norte group logItType(delnorte.group); // constructed classroom object logItType(delnorte.group[0].name); // abstract 1st objects name logItType(delnorte.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(delnorte.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Abby&#39;, favcolor: &#39;pink&#39;, age: 17, role: &#39;upperclassmen&#39; }, Person { name: &#39;Olivia&#39;, favcolor: &#39;purple&#39;, age: 14, role: &#39;underclassmen&#39; }, Person { name: &#39;Allie&#39;, favcolor: &#39;green&#39;, age: 15, role: &#39;underclassmen&#39; }, Person { name: &#39;Claire&#39;, favcolor: &#39;pink&#39;, age: 15, role: &#39;underclassmen&#39; } ] string ; Abby string ; {&#34;name&#34;:&#34;Abby&#34;,&#34;favcolor&#34;:&#34;pink&#34;,&#34;age&#34;:17,&#34;role&#34;:&#34;upperclassmen&#34;} object ; { name: &#39;Abby&#39;, favcolor: &#39;pink&#39;, age: 17, role: &#39;upperclassmen&#39; } . IJavaScript and Table formatting using toHTML method . Create table . // define an HTML conversion &quot;method&quot; associated with Group Group.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Favorite Color&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Age&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of delnorte.group for (var row of delnorte.group) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.favcolor + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.age + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(delnorte._toHtml()); . NameFavorite ColorAgeRole . Abby | pink | 17 | upperclassmen | Olivia | purple | 14 | underclassmen | Allie | green | 15 | underclassmen | Claire | pink | 15 | underclassmen | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://clairehzhao.github.io/claire/markdown/week5/jupyter/javascript/2022/09/25/jupyterjskernel.html",
            "relUrl": "/markdown/week5/jupyter/javascript/2022/09/25/jupyterjskernel.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "JavaScript with Math",
            "content": "What is JavaScript . JavaScript is another programming language like Python. It works with other coding languages like CSS and HTML. | JavaScript includes variables, operators, functions, loops, strings, and much more. | . JavaScript can be used for math! . Rounding . Math.round(4.6); . 5 . Math.round(2.3); . 2 . Ceiling Function . Math.ceil(4.9); . 5 . Math.ceil(4.2); . 5 . Floor Function . Math.floor(6.7); . 6 . Math.floor(2.1); . 2 . Positive and Negative Signs . Math.sign(2); . 1 . Math.sign(-4); . -1 . Powers . Math.pow(4, 2); . 16 . Math.pow(3, 4); . 81 . Square Roots . Math.sqrt(4); . 2 . Math.sqrt(15); . 3.872983346207417 . Absolute Value . Math.abs(7); . 7 . Math.abs(-54278); . 54278 .",
            "url": "https://clairehzhao.github.io/claire/markdown/week5/jupyter/javascript/2022/09/25/javascriptmath.html",
            "relUrl": "/markdown/week5/jupyter/javascript/2022/09/25/javascriptmath.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Agile Methodology",
            "content": "Agile Methodology . Scrum Board . . Notes . Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. | Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage. | Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. | Business people and developers must work together daily throughout the project. | Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. | The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. | Working software is the primary measure of progress. | Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. | Continuous attention to technical excellence and good design enhances agility. | Simplicity–the art of maximizing the amount of work not done–is essential. | The best architectures, requirements, and designs emerge from self-organizing teams. | At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. |",
            "url": "https://clairehzhao.github.io/claire/week5/markdown/2022/09/25/agilemethodology.html",
            "relUrl": "/week5/markdown/2022/09/25/agilemethodology.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Group Collaboration",
            "content": "Google Doc used for collaboration in our group. We used the think-pair-share method to collaborate and took notes on the google doc to document our progress . Link .",
            "url": "https://clairehzhao.github.io/claire/week4/markdown/2022/09/18/collaboration.html",
            "relUrl": "/week4/markdown/2022/09/18/collaboration.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "1.1 Collaboration",
            "content": "College Board Quiz Results . . Learning Objectives . CRD-1.A: Explain how computing innovations are improved through collaboration . CRD-1.B: Explain how computing innovations are developed by groups of people . CRD-1.C: Demonstrate effective interpersonal skills during collaboration . Video Notes . Facebook has areas in their buildings that allow people to come together and collaborate reflects the diverstiy of talents and perspectives of those who designed it | . | A computing innovation includes a program as an integral part of its function | A computing innovation can be physical, nonphysical computing softwares, or a nonphysical computing concept. | Collaboration that includes diverse perspectives helps avoid bias in the development of computing innovations ex. Super Mario Brothers 2 vs. Super Mario Brothers 3 | . | Interpersonal skills learned through collaboration include: communitation | consensus building | conflict resolution | negotiation | . | Pair Programming two programmers work together as a pair. One as the driver (writes program code), the other as the navigator (reviews each line of code as it is typed in) | switch back and forth | . | Think-Pair-Share students think through a problem alone, pair with a partner to share ideas, and then share results with the class | thinking alone are independent | when pairing up can learn more about the topic | . | Leave comments in code communicate to your parents | communicate to yourself | acknowledge code segments used from other sources | acknowledge media used from other sources | differentiate what you and you partner(s) did | clarify the funcionality of your cold | . | How to collaborate repl.it | GitHub | shared doc/folder | give each other feedback | . | .",
            "url": "https://clairehzhao.github.io/claire/week4/markdown/2022/09/16/bigidea1colaboration.html",
            "relUrl": "/week4/markdown/2022/09/16/bigidea1colaboration.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Psychology and the Good Life",
            "content": "Video Notes . yale university professor | yale students are filled with lots of stress | little times at yale to do the little things that bring them joy | this is not just at yale, this is at college campuses all around the country | 40% percent of college students present more than the average level of stress | 1/3 of students are so depressed it is difficult the function | over 40% are hopeless | just under 50% of students are feeling an overwhelming amount of anxiety | over 80% of the students are feeling overwhelmed by all the things they are supposed to be doing all the time | need a better culture and enviromnment in school | not just being realized in the colleges | 1 out of every 4 students took this class in yale | showing that there was a need for this class | in class they learned you are not stuck in the well-being that you are in right now | many people realize that bad things that happen in their life cause them to become happier, they learn to live life fully now that something horrible has happened to them | it takes a lot of effort and permanent changes to become happier | G.I. Joe fallacy that knowing is just half the battle, we have to put in the effort and work | recognizing that your mind is lying to you about what it means to be happy | people think that money/salary will make you happier | those who think that money is needed to be happy, tend to be the ones with worse well-being | . | things that people can do to be happier: prioritize time for social connection | human connection causes more positivity | helping others: spending any amount of money on others | make time for gratitude every single day: private and public | healthy practices: exercise and sleep | taking time to be in the present moment | beome wealthy in TIME not money | . | . Gratitude List . three day weekend | my family | my friends | playing field hockey | figure skating | meeting new people in school | comfy pjs | colder weather | hiking trails nearby | . Goals: . spend more time helping others | try and get moe sleep | welathy in time | focus less on money | prioritize social interations more | .",
            "url": "https://clairehzhao.github.io/claire/week4/markdown/2022/09/15/pyschologyandthegoodlifevideo.html",
            "relUrl": "/week4/markdown/2022/09/15/pyschologyandthegoodlifevideo.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "App Lab Program",
            "content": "Quiz Creation . Taylor Swift Quiz . Link to creation! . Planning: Growing up I loved taking Buzzfeed quizzes about topics that I loved and enjoyed, this inspired me to create this quiz. I wanted this quiz to be a quiz about something that I loved so I chose Taylor Swift. I had never used code.org before so I wanted to experiment around and have all the questions have different formats. I also knew that I wanted to add lots of pictures into the quiz. I wanted to be able to generate a score at the end, so I decided to do a trivia quiz. . Function: This quiz has 4 questions that will test the users knowledge on facts about Taylor Swift. As the user answers questions, they will be notified if the answer is correct or incorrect. At the end of the quiz they will be given a score on how they did on the quiz. . How it was created: . set variables for the score to 0 to have an accurate score calculated at the end of the quiz | score is calculated by the number of correct answers and the number of attempts when answering questions | when user gets the answer correct 1 is added to the score and the number of tries | when user gets the answer wrong 1 is added to the number of tries but the score stays the same | the quiz starts at a home page with a start button that leads to the first question | first question has a sliding bar with set values that determine if the answer is correct. user must slide the bar to the correct photo to answer the question. when the bar is at the correct point it leads the user to the correct answer screen and is guided to the next question. when the answer is incorrect, the user is lead to an incorrect answer screen, and asked to try again. | the second question has photos with buttons that can be clicked to answer the question. just like the first question when the answer is correct, there is a correct answer page and when the answer is incorrect, there is a incorrect answer page. | the third question uses a drop down bar to answer the question. there are 4 options and the user clicks on one of options to answer the question. the user will be lead to either an incorrect or correct answer page when they answer the question. | the final question is a text input question. the user is asked to answer a question by typing in an answer. after typing the answer the user will push enter on their keyboard and will be lead an incorrect or correct answer page. | after the user has completed the quiz, they are lead to the final page. in this final page there is a button that can be clicked to reveal their final score. the score is generated by the function that was created in the beginning. | . Successes: . it was easy to navigate the platform so the coding portion of the project was fairly easy to catch on to | the quiz is clear and easy to understand | learned how to use variables to help calculate score at the end of quiz | design portion of the quiz is neat and pretty | . Struggles: . there are a lot of different id’s so it is important to label the images, text boxes, buttons, and pages so they don’t get confusing | the code was often repetitive and there wasn’t a way to copy and paste the code | .",
            "url": "https://clairehzhao.github.io/claire/week3/markdown/2022/09/10/applab.html",
            "relUrl": "/week3/markdown/2022/09/10/applab.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Remote Theme Change",
            "content": ". Theme Change Findings . Front Page . color theme changed | blog links are only on right side of the page | links and words overlapping each other | hard to read Individual Posts . | code only takes up half of the page | code and words overlap | blog site title still in actual post | images will not load | .",
            "url": "https://clairehzhao.github.io/claire/markdown/week2/2022/09/04/themechangeanalyze.html",
            "relUrl": "/markdown/week2/2022/09/04/themechangeanalyze.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Info Data Base",
            "content": "The database InfoDb has information on two schools. Each including their name, principal, year the school was built, school level, number of students, number of teachers, zip code, and the school colors. Using the school name, this information will be found through through the dictionary. . InfoDb = [] # Append to List a Dictionary of key/value related to the school and information InfoDb.append({ &quot;SchoolName&quot;: &quot;Del Norte High School&quot;, &quot;Principal&quot;: &quot;Bryan Schultz&quot;, &quot;Founded&quot;: &quot;2009&quot;, &quot;SchoolLevel&quot;: &quot;Highschool&quot;, &quot;StudentNumber&quot;: &quot;2585&quot;, &quot;TeacherNumber&quot;: &quot;92&quot;, &quot;Zipcode&quot;: &quot;92127&quot;, &quot;SchoolColors&quot;: [&quot;Navy Blue, Forest Green, Vegas Gold&quot;] }) # Append to List a 2nd Dictionary with key/values InfoDb.append({ &quot;SchoolName&quot;: &quot;Westview High School&quot;, &quot;Principal&quot;: &quot;Ernie Remillard&quot;, &quot;Founded&quot;: &quot;2002&quot;, &quot;SchoolLevel&quot;: &quot;Highschool&quot;, &quot;StudentNumber&quot;: &quot;2376&quot;, &quot;TeacherNumber&quot;: &quot;85&quot;, &quot;Zipcode&quot;: &quot;92129&quot;, &quot;SchoolColors&quot;: [&quot;Black, White, Vegas Gold&quot;] }) # Print Data Structure print(InfoDb) . [{&#39;SchoolName&#39;: &#39;Del Norte High School&#39;, &#39;Principal&#39;: &#39;Bryan Schultz&#39;, &#39;Founded&#39;: &#39;2009&#39;, &#39;SchoolLevel&#39;: &#39;Highschool&#39;, &#39;StudentNumber&#39;: &#39;2585&#39;, &#39;TeacherNumber&#39;: &#39;92&#39;, &#39;Zipcode&#39;: &#39;92127&#39;, &#39;SchoolColors&#39;: [&#39;Navy Blue, Forest Green, Vegas Gold&#39;]}, {&#39;SchoolName&#39;: &#39;Westview High School&#39;, &#39;Principal&#39;: &#39;Ernie Remillard&#39;, &#39;Founded&#39;: &#39;2002&#39;, &#39;SchoolLevel&#39;: &#39;Highschool&#39;, &#39;StudentNumber&#39;: &#39;2376&#39;, &#39;TeacherNumber&#39;: &#39;85&#39;, &#39;Zipcode&#39;: &#39;92129&#39;, &#39;SchoolColors&#39;: [&#39;Black, White, Vegas Gold&#39;]}] . In the code above, both schools information was saved in the dictionary. . def print_data(d_school): print(d_school[&quot;SchoolName&quot;]) print(&quot; t&quot;, &quot;Principal:&quot;, d_school[&quot;Principal&quot;]) print(&quot; t&quot;, &quot;Founded:&quot;, d_school[&quot;Founded&quot;]) print(&quot; t&quot;, &quot;School Type:&quot;, d_school[&quot;SchoolLevel&quot;]) print(&quot; t&quot;, &quot;Number of Students:&quot;, d_school[&quot;StudentNumber&quot;]) print(&quot; t&quot;, &quot;Number of Teachers:&quot;, d_school[&quot;TeacherNumber&quot;]) print(&quot; t&quot;, &quot;ZipCode:&quot;, d_school[&quot;Zipcode&quot;]) print(&quot; t&quot;, &quot;School Colors:&quot;, d_school[&quot;SchoolColors&quot;]) # for loop algorithm iterates on length of InfoDb def for_loop(): for record in InfoDb: print_data(record) for_loop() . Del Norte High School Principal: Bryan Schultz Founded: 2009 School Type: Highschool Number of Students: 2585 Number of Teachers: 92 ZipCode: 92127 School Colors: [&#39;Navy Blue, Forest Green, Vegas Gold&#39;] Westview High School Principal: Ernie Remillard Founded: 2002 School Type: Highschool Number of Students: 2376 Number of Teachers: 85 ZipCode: 92129 School Colors: [&#39;Black, White, Vegas Gold&#39;] . In the code above, the for loop was able to iterate over the InfoDb to find the information of the school and print the information. . def while_loop(): i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . Del Norte High School Principal: Bryan Schultz Founded: 2009 School Type: Highschool Number of Students: 2585 Number of Teachers: 92 ZipCode: 92127 School Colors: [&#39;Navy Blue, Forest Green, Vegas Gold&#39;] Westview High School Principal: Ernie Remillard Founded: 2002 School Type: Highschool Number of Students: 2376 Number of Teachers: 85 ZipCode: 92129 School Colors: [&#39;Black, White, Vegas Gold&#39;] . The while loop above printed the school&#39;s information as long as the variable being used is less than the length of the InfoDb. . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return recursive_loop(0) . Del Norte High School Principal: Bryan Schultz Founded: 2009 School Type: Highschool Number of Students: 2585 Number of Teachers: 92 ZipCode: 92127 School Colors: [&#39;Navy Blue, Forest Green, Vegas Gold&#39;] Westview High School Principal: Ernie Remillard Founded: 2002 School Type: Highschool Number of Students: 2376 Number of Teachers: 85 ZipCode: 92129 School Colors: [&#39;Black, White, Vegas Gold&#39;] . The code above was able to print the school information by using a recursive loop, which calls itself repeatedly. . input_schoolname = input(&quot;Enter which school you would like to search for:&quot;) input_information = input(&quot;Enter what you are searching for: ex. Principal, SchoolName, Founded, SchoolLevel, StudentNumber, TeacherNumber, Zipcode, or SchoolColors&quot;) # define function to print records def search_school(): for info in InfoDb: found_school = 0 found_info = 0 found_key = &quot;&quot; for key in info: if (found_school == 0): if info[key] == input_schoolname: found_school = 1 # print(&quot;School is found&quot; + str(found_school) + &quot; n&quot;) if (found_info == 0): if key == input_information: found_key = key found_info = 1 # print(&quot;key is &quot; + key + &quot; n&quot;) if (found_school == 1 and found_info == 1): print(&quot;School Name: &quot; + input_schoolname) print(&quot;Information: &quot; + found_key + &quot;: &quot; ) print(info[found_key]) return if (found_school == 0 or found_info == 0): print(&quot;Information not found.&quot;) search_school() . School Name: Westview High School Information: Founded: 2002 . Using a for loop the code was able to take information from the dictionary and compare it with the user input. By doing so, the user can choose which piece of information it would like to view. . input_schoolname = input(&quot;Enter which school you would like to search for:&quot;) input_information = input(&quot;Enter what you are searching for: ex. Principal, SchoolName, Founded, SchoolLevel, StudentNumber, TeacherNumber, Zipcode, or SchoolColors&quot;) # define function to print records def find_school(): found_school = False found_info = False i = 0 while (found_school == False or found_info == False): found_key = &quot;&quot; info = InfoDb[i] i += 1 for key in info: if (found_school == 0): if info[key] == input_schoolname: found_school = True # print(&quot;School is found&quot; + str(found_school) + &quot; n&quot;) if (found_info == 0): if key == input_information: found_key = key found_info = True # print(&quot;key is &quot; + key + &quot; n&quot;) if (found_school == True and found_info == True): print(&quot;School Name: &quot; + input_schoolname) print(&quot;Information: &quot; + found_key + &quot;: &quot; ) print(info[found_key]) if (found_school == False or found_info == False): print(&quot;Information not found.&quot;) find_school() . School Name: Del Norte High School Information: SchoolColors: [&#39;Navy Blue, Forest Green, Vegas Gold&#39;] . Doing something similar to the for loop, a while loop was used. The while loop was able to find the information the user wanted as long as the conditions were true. .",
            "url": "https://clairehzhao.github.io/claire/python/markdown/week2/jupyter/2022/09/04/listsdictionaryiteration.html",
            "relUrl": "/python/markdown/week2/jupyter/2022/09/04/listsdictionaryiteration.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Claire Zhao&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 15 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;C&quot;, &quot;R&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[2]&quot;, langs[2], type(langs[2])) print(len(langs)) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Claire Zhao &lt;class &#39;str&#39;&gt; age 15 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;C&#39;, &#39;R&#39;] &lt;class &#39;list&#39;&gt; - langs[2] Java &lt;class &#39;str&#39;&gt; 5 person {&#39;name&#39;: &#39;Claire Zhao&#39;, &#39;age&#39;: 15, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;C&#39;, &#39;R&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Claire Zhao &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Claire&quot;, &quot;LastName&quot;: &quot;Zhao&quot;, &quot;DOB&quot;: &quot;February 1&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;claire.zhao1234@gmail.com&quot;, &quot;Owns_Cars&quot;: &quot;none&quot;, &quot;Favorite_Color&quot;: &quot;Pink&quot; }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;], &quot;Favorite_Color&quot;: &quot;Pink&quot; }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Claire&#39;, &#39;LastName&#39;: &#39;Zhao&#39;, &#39;DOB&#39;: &#39;February 1&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;claire.zhao1234@gmail.com&#39;, &#39;Owns_Cars&#39;: &#39;none&#39;, &#39;Favorite_Color&#39;: &#39;Pink&#39;}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;], &#39;Favorite_Color&#39;: &#39;Pink&#39;}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Favorite_Color:&quot;, d_rec[&quot;Favorite Color&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Claire Zhao Residence: San Diego Birth Day: February 1 . KeyError Traceback (most recent call last) /Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 7 in &lt;cell line: 18&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; for record in InfoDb: &lt;a href=&#39;vscode-notebook-cell:/Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; print_data(record) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; for_loop() /Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 7 in for_loop() &lt;a href=&#39;vscode-notebook-cell:/Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; print(&#34;For loop output n&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; for record in InfoDb: &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; print_data(record) /Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 7 in print_data(d_rec) &lt;a href=&#39;vscode-notebook-cell:/Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print(&#34; t&#34;, &#34;Residence:&#34;, d_rec[&#34;Residence&#34;]) # t is a tab indent &lt;a href=&#39;vscode-notebook-cell:/Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; print(&#34; t&#34;, &#34;Birth Day:&#34;, d_rec[&#34;DOB&#34;]) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; print(&#34; t&#34;, &#34;Favorite_Color:&#34;, d_rec[&#34;Favorite Color&#34;]) &lt;a href=&#39;vscode-notebook-cell:/Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(&#34; t&#34;, &#34;Cars: &#34;, end=&#34;&#34;) # end=&#34;&#34; make sure no return occurs &lt;a href=&#39;vscode-notebook-cell:/Users/clairezhao/vscode/claire/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; print(&#34;, &#34;.join(d_rec[&#34;Owns_Cars&#34;])) # join allows printing a string list with separator KeyError: &#39;Favorite Color&#39; . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://clairehzhao.github.io/claire/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "CSP Terms",
            "content": "Push/Pull - to send/recieve code to and from GitHub . Print - input that prints a specific method on the screen . Markdown - syntax used to format plain text . Define - defining a function or method . If statement - used for conditional execution . Front Matter - section of code that is on top of files with key-values . Variable - word used as a container to hold information . String - series of characters . Boolean - value that is either true or false .",
            "url": "https://clairehzhao.github.io/claire/markdown/week1/2022/08/27/cspterms.html",
            "relUrl": "/markdown/week1/2022/08/27/cspterms.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Bash Installation Check",
            "content": "%%bash #Check version of Conda conda_version=$(conda -V 2&gt;&amp;1 | sed -n &#39;;s/.*conda (.* )/ 1/p;&#39;) #conda_version=$(conda -V 2&gt;&amp;1 | sed -n &#39;;s/.*conda &quot; (.* ) . (.* ) ..*&quot;.*/ 1 2/p;&#39;) #conda_version=&#39;conda -V | sed -n &#39;;s/conda &quot; (.* ) . (.* ) ..*&quot;.*/ 1 2/p;&#39; #echo $conda_version #Check version of Python python_version=`python -c &#39;import sys; version=sys.version_info[:3]; print(&quot;{0}.{1}.{2}&quot;.format(*version))&#39;` #Print using conditional statement if [ $conda_version &gt; &quot;0&quot; ]; then echo &quot;Conda version: &quot;$conda_version else echo &quot;Conda not installed&quot; fi if [ $python_version &gt; &quot;0&quot; ]; then echo &quot;Python version: &quot;$python_version else echo &quot;Python not installed&quot; fi . Conda version: 4.14.0 Python version: 3.9.12 .",
            "url": "https://clairehzhao.github.io/claire/week1/jupyter/2022/08/27/bashinstallcheck.html",
            "relUrl": "/week1/jupyter/2022/08/27/bashinstallcheck.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Python Vocab Quiz",
            "content": "score = 0 questions = 4 def q_a(q, a): answer = input(q) score = 0 if answer == a: print(&quot;Good job! That is correct!&quot;) score = 1 else: print(&quot;Nice try! The answer is &quot; + a + &quot;.&quot;) return score #intro: name = input(&quot;Enter your name:&quot;) print(&quot;Hey! &quot; + name) ready = input(&quot;This quiz will have &quot; + str(questions) + &quot; questions that will test your abilities to identify python terms. Are you ready to start this quiz? Answer yes or no.&quot;) if ready == &quot;yes&quot;: print(&quot;Let&#39;s get started!&quot;) else: print(&quot;YOU GOT THIS!&quot;) #question 1: score = score + q_a(&quot;Question 1: What term defines a function or method?&quot;, &quot;def&quot;) #question 2: score = score + q_a(&quot;Question 2: What is a series of characters?&quot;, &quot;string&quot;) #question 3: score = score + q_a(&quot;Question 3: What input prints specified messages on the screen?&quot;, &quot;print&quot;) #question 4: score = score + q_a(&quot;Question 4: What is a value that is either true or false?&quot;, &quot;boolean&quot;) #ending score if score &gt;= 3: print(&quot;Congratulations! You completed this quiz with an amazing score! You scored a: {}/4&quot; .format(score)) else: print(&quot;Congratulations! You completed the quiz. Your score is a: {}/4&quot; .format(score)) . Hey! Claire Let&#39;s get started! Good job! That is correct! Good job! That is correct! Good job! That is correct! Nice try! The answer is boolean. Congratulations! You completed this quiz with an amazing score! You scored a: 3/4 .",
            "url": "https://clairehzhao.github.io/claire/python/week1/jupyter/2022/08/26/pythonquiz.html",
            "relUrl": "/python/week1/jupyter/2022/08/26/pythonquiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Daily Blog",
            "content": "Day at Del Norte High School . First Period: . AP Calculus AB . Starts at 8:35 am | Currently learning limits | Reviewing functions | About 15 questions for homework a day | Quiz on limits this Tuesday (8/30) | . In class: . Warm Up | Check homework | Go over warm up and homework | Notes on new material | Homework time | . Second Period: . Honors Humanities . Starts at 9:49 am | Learning about the definition of art | Working on annotating and reading challenging texts | Notebook check turned in on Friday | . Break . 10 minute break . Hangout with friends! | . Third period: . AP Biology . Starts at 11:13 | First unit is unit 7 | Learning about evolution | No homework in class, just spend 30 minutes taking notes | Using videos, concept maps, and the textbook to take notes | Notes not turned in | Learning about Galapagos Finches | Working on projects in a group | . Lunch: . 30 minute lunch . Go to lunch tutorial if needed | Having fun with friends! | . Fourth Period: . AP CSP . Starts at 12:57 | Using GitHub, VSCode, Markdown, and Python | Learning to use GitHub | Learning to use VSCode | Learning to use python to make a quiz | Learning to use markdown to make blogs about the day and take notes | . Office Hours: . 25 minutes . Ask teachers questions | Work on homework | . Fifth Period: . Offroll! . Starts at 2:36 | Work on homework with friends! | . Field Hockey . 4-6pm | Playing Field Hockey with my amazing team | .",
            "url": "https://clairehzhao.github.io/claire/markdown/week1/2022/08/24/daily-blog.html",
            "relUrl": "/markdown/week1/2022/08/24/daily-blog.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Markdown Post",
            "content": "Markdown can be used to format text when writing. . Some feautures include: . bold text | italicized text | emojis 😊 | color color color color | different fonts | striketrhough | images | .",
            "url": "https://clairehzhao.github.io/claire/markdown/week0/2022/08/20/markdown-blog.html",
            "relUrl": "/markdown/week0/2022/08/20/markdown-blog.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Hey World - Python",
            "content": "Code . msg = &quot;Hey World&quot; print (msg) . Hey World .",
            "url": "https://clairehzhao.github.io/claire/week0/jupyter/python/2022/08/20/First-Post.html",
            "relUrl": "/week0/jupyter/python/2022/08/20/First-Post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | .",
            "url": "https://clairehzhao.github.io/claire/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "| Example API | . Hey! My name is Claire Zhao, and I’m a sophomore at Del Norte High School. .",
          "url": "https://clairehzhao.github.io/claire/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "JavaScript",
          "content": "Jupyter Notebook that shows personal usage of Jupyter JavaScript Kernel . Link . Post that uses HTML fragments and JavaScript data to build a table . Link .",
          "url": "https://clairehzhao.github.io/claire/JavaScript/",
          "relUrl": "/JavaScript/",
          "date": ""
      }
      
  

  
  

  

  
  

  
      ,"page7": {
          "title": "Submenu",
          "content": "Jupyter Notebook showing personal usage of Jupyter JavaScript Kernel . Link . Post that uses HTML fragments and JavaScript data to build a table . Link .",
          "url": "https://clairehzhao.github.io/claire/Submenu/",
          "relUrl": "/Submenu/",
          "date": ""
      }
      
  

  

  
      ,"page9": {
          "title": "Notes and Vocabulary",
          "content": "Notes: . Unit 3 Lesson 1-2: 0.98/1 . Unit 3 Lesson 3-4: 0.9/1 . Unit 3 Lesson 5-7: 1/1 . Unit 3 Lesson 8 &amp; 10: 1.8/2 = 0.9/1 . Unit 3 Lesson 12-13: 0.85/1 . Unit 3 Lesson 14-15: 0.95/1 . Unit 3 Lesson 16: 0.9/1 . Unit 3 Lesson 17-18: (not graded) . Vocabulary: . Unit 2… Binary/Data Terms . bits: The smallest unit of data that a computer can process and store. A bit is always in one of two physical states, similar to an on/off light switch. The state is represented by a single binary value, usually a 0 or 1. . | bytes: A byte is a unit of data that is eight binary digits long. A byte is the unit most computers use to represent a character such as a letter, number or typographic symbol. 00000000 - 11111111 . | hexadecimal / nibbles: Hexadecimal is a numbering system with base 16. It can be used to represent large numbers with fewer digits. In this system there are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters – A, B, C, D, E and F. It can be used for colors, ex. #FCD0E0 . | boolean: true or false value . | . . ASCII: most common character encoding format for text data in computers and on the internet . | Unicode: the universal character representation standard for text in computer processing. . | RGB: (red, green, and blue) refers to a system for representing the colors to be used on a computer display. . | Lossy: Lossy is a data encoding and compression technique that deliberately discards some data in the compression process . | Lossless: restores and rebuilds file data in its original form after the file is decompressed . | . Unit 3… Algorithm/Programming Terms . variable: used to store information to be used and referred to | . . data types: integer, strings, boolean, lists, dictionaries . | lists: abstract data type that represents a finite number of ordered values . | dictionaries: an abstract data type that defines an unordered collection of data as a set of key-value pairs . | . . assignment operators: addition: a + b | subtraction: a - b | multiplication: a * b | division: a / b | MOD: a % b | . | . . algorithm: commands that do a certain task . | sequence: the order in which the statements are executed . | selection: a section of code is run only if a condition is met. . | iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . | . . characters: a display unit of information equivalent to one alphabetic letter or symbol . | expressions: combination of operators/operands . | . truth tables . AND: 1 1 | OR: 0 1, 1 0, 1 1 | XOR: 0 0, 1 1 | NOT: 0 . | length: number of characters in a string . | concatenation: combining two things . | upper/Lower: change case . | traversing Strings: use index . | if: do an action when something is true . | elif: first condition false, test another . | else: action when first condition false . | nested selection: condition inside condition | . . for: action for each x in y . | while: loops as long as condition true . | break: end loop . | continue: keep loop . | . . def: defining a function to do a procedure . | parameters: values given to a function to work with . | return: brings variables out of function after running . | . .",
          "url": "https://clairehzhao.github.io/claire/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://clairehzhao.github.io/claire/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}